
estick-jtag.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000117c  00001210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000117c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000182  0080010c  0080010c  0000121c  2**0
                  ALLOC
  3 .debug_aranges 00000298  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007ce  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000032fa  00000000  00000000  00001c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000116e  00000000  00000000  00004f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002ca3  00000000  00000000  000060ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  00008d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000173b  00000000  00000000  00009140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018b2  00000000  00000000  0000a87b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a0  00000000  00000000  0000c12d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			return true;
		}	
	}
	
	return false;
}
       0:	a2 c0       	rjmp	.+324    	; 0x146 <__ctors_end>
#endif

uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
{
	return Endpoint_BytesToEPSizeMask(Size);
}
       2:	00 00       	nop
       4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
       6:	00 00       	nop
       8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
       a:	00 00       	nop
       c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
       e:	00 00       	nop
      10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
      12:	00 00       	nop
      14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
      16:	00 00       	nop
      18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
      1e:	00 00       	nop
      20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
      22:	00 00       	nop
      24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
      26:	00 00       	nop
      28:	cb c7       	rjmp	.+3990   	; 0xfc0 <__vector_10>
      2a:	00 00       	nop
      2c:	a7 c0       	rjmp	.+334    	; 0x17c <__bad_interrupt>
      2e:	00 00       	nop
      30:	a5 c0       	rjmp	.+330    	; 0x17c <__bad_interrupt>
      32:	00 00       	nop
      34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
      36:	00 00       	nop
      38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
      3e:	00 00       	nop
      40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
      42:	00 00       	nop
      44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
      46:	00 00       	nop
      48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
      4e:	00 00       	nop
      50:	95 c0       	rjmp	.+298    	; 0x17c <__bad_interrupt>
      52:	00 00       	nop
      54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
      56:	00 00       	nop
      58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
      5e:	00 00       	nop
      60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
      62:	00 00       	nop
      64:	8b c0       	rjmp	.+278    	; 0x17c <__bad_interrupt>
      66:	00 00       	nop
      68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
      6e:	00 00       	nop
      70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
      72:	00 00       	nop
      74:	83 c0       	rjmp	.+262    	; 0x17c <__bad_interrupt>
      76:	00 00       	nop
      78:	81 c0       	rjmp	.+258    	; 0x17c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7f c0       	rjmp	.+254    	; 0x17c <__bad_interrupt>
      7e:	00 00       	nop
      80:	7d c0       	rjmp	.+250    	; 0x17c <__bad_interrupt>
      82:	00 00       	nop
      84:	7b c0       	rjmp	.+246    	; 0x17c <__bad_interrupt>
      86:	00 00       	nop
      88:	79 c0       	rjmp	.+242    	; 0x17c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	77 c0       	rjmp	.+238    	; 0x17c <__bad_interrupt>
      8e:	00 00       	nop
      90:	75 c0       	rjmp	.+234    	; 0x17c <__bad_interrupt>
      92:	00 00       	nop
      94:	73 c0       	rjmp	.+230    	; 0x17c <__bad_interrupt>
      96:	00 00       	nop
      98:	71 c0       	rjmp	.+226    	; 0x17c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6f c0       	rjmp	.+222    	; 0x17c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6d c0       	rjmp	.+218    	; 0x17c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6b c0       	rjmp	.+214    	; 0x17c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	69 c0       	rjmp	.+210    	; 0x17c <__bad_interrupt>
      aa:	00 00       	nop

000000ac <DeviceDescriptor>:
      ac:	12 01 10 01 00 00 00 08 81 17 c0 c0 01 00 01 02     ................
      bc:	03 01                                               ..

000000be <ConfigurationDescriptor>:
      be:	09 02 20 00 01 01 00 c0 32 09 04 00 00 02 ff 00     .. .....2.......
      ce:	00 00 07 05 81 02 40 00 00 07 05 02 02 40 00 00     ......@......@..

000000de <LanguageString>:
      de:	04 03 09 04                                         ....

000000e2 <ManufacturerString>:
      e2:	2c 03 77 00 77 00 77 00 2e 00 74 00 65 00 63 00     ,.w.w.w...t.e.c.
      f2:	68 00 6e 00 69 00 6b 00 75 00 6d 00 2d 00 77 00     h.n.i.k.u.m.-.w.
     102:	69 00 65 00 6e 00 2e 00 61 00 74 00 00 00           i.e.n...a.t...

00000110 <ProductString>:
     110:	18 03 65 00 73 00 74 00 69 00 63 00 6b 00 2d 00     ..e.s.t.i.c.k.-.
     120:	6a 00 74 00 61 00 67 00 00 00                       j.t.a.g...

0000012a <SerialNumberString>:
     12a:	1a 03 30 00 30 00 30 00 30 00 30 00 30 00 30 00     ..0.0.0.0.0.0.0.
     13a:	30 00 30 00 30 00 30 00 30 00 00 00                 0.0.0.0.0...

00000146 <__ctors_end>:
     146:	11 24       	eor	r1, r1
     148:	1f be       	out	0x3f, r1	; 63
     14a:	cf ef       	ldi	r28, 0xFF	; 255
     14c:	da e0       	ldi	r29, 0x0A	; 10
     14e:	de bf       	out	0x3e, r29	; 62
     150:	cd bf       	out	0x3d, r28	; 61

00000152 <__do_copy_data>:
     152:	11 e0       	ldi	r17, 0x01	; 1
     154:	a0 e0       	ldi	r26, 0x00	; 0
     156:	b1 e0       	ldi	r27, 0x01	; 1
     158:	ec e7       	ldi	r30, 0x7C	; 124
     15a:	f1 e1       	ldi	r31, 0x11	; 17
     15c:	02 c0       	rjmp	.+4      	; 0x162 <.do_copy_data_start>

0000015e <.do_copy_data_loop>:
     15e:	05 90       	lpm	r0, Z+
     160:	0d 92       	st	X+, r0

00000162 <.do_copy_data_start>:
     162:	ac 30       	cpi	r26, 0x0C	; 12
     164:	b1 07       	cpc	r27, r17
     166:	d9 f7       	brne	.-10     	; 0x15e <.do_copy_data_loop>

00000168 <__do_clear_bss>:
     168:	12 e0       	ldi	r17, 0x02	; 2
     16a:	ac e0       	ldi	r26, 0x0C	; 12
     16c:	b1 e0       	ldi	r27, 0x01	; 1
     16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
     170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
     172:	ae 38       	cpi	r26, 0x8E	; 142
     174:	b1 07       	cpc	r27, r17
     176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
     178:	54 d1       	rcall	.+680    	; 0x422 <main>
     17a:	fe c7       	rjmp	.+4092   	; 0x1178 <_exit>

0000017c <__bad_interrupt>:
     17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <EVENT_USB_UnhandledControlPacket>:
void EVENT_USB_UnhandledControlPacket(void)
{
	//NOTE - this is here as a template only, LoopBack does not make use of it

	/* Handle HID Class specific requests here (these are Control EP requests) */
	switch (USB_ControlRequest.bRequest)
     17e:	80 91 86 02 	lds	r24, 0x0286
     182:	81 30       	cpi	r24, 0x01	; 1
     184:	91 f4       	brne	.+36     	; 0x1aa <EVENT_USB_UnhandledControlPacket+0x2c>
	{
		case 0x01:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     186:	80 91 85 02 	lds	r24, 0x0285
     18a:	81 3a       	cpi	r24, 0xA1	; 161
     18c:	71 f4       	brne	.+28     	; 0x1aa <EVENT_USB_UnhandledControlPacket+0x2c>
			{
				Endpoint_ClearSETUP();
     18e:	80 91 e8 00 	lds	r24, 0x00E8
     192:	87 7f       	andi	r24, 0xF7	; 247
     194:	80 93 e8 00 	sts	0x00E8, r24
        //TODO add reset code here
				/* Write the report data to the control endpoint */
				//Endpoint_Write_Control_Stream_LE(&dataToSend, sizeof(dataToSend));
        
				/* Finalize the transfer, acknowedge the host error or success OUT transfer */
				Endpoint_ClearOUT();
     198:	80 91 e8 00 	lds	r24, 0x00E8
     19c:	98 2f       	mov	r25, r24
     19e:	9b 7f       	andi	r25, 0xFB	; 251
     1a0:	90 93 e8 00 	sts	0x00E8, r25
     1a4:	8f 77       	andi	r24, 0x7F	; 127
     1a6:	80 93 e8 00 	sts	0x00E8, r24
     1aa:	08 95       	ret

000001ac <USB_MainTask>:
  		break;
	}
}

TASK(USB_MainTask)
{	
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
	/* Check if the USB System is connected to a Host */
	if (USB_IsConnected)
     1b4:	80 91 84 02 	lds	r24, 0x0284
     1b8:	88 23       	and	r24, r24
     1ba:	09 f4       	brne	.+2      	; 0x1be <USB_MainTask+0x12>
     1bc:	0e c1       	rjmp	.+540    	; 0x3da <USB_MainTask+0x22e>
	{
		/* process data or do something generally useful */
		/* note that TASK(USB_MainTask) will be periodically executed when no other tasks or functions are running */
     
    Endpoint_SelectEndpoint(IN_EP);
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	80 93 e9 00 	sts	0x00E9, r24

    if (dataToHostSize && Endpoint_IsReadWriteAllowed())
     1c4:	60 91 0e 01 	lds	r22, 0x010E
     1c8:	70 91 0f 01 	lds	r23, 0x010F
     1cc:	61 15       	cp	r22, r1
     1ce:	71 05       	cpc	r23, r1
     1d0:	b1 f0       	breq	.+44     	; 0x1fe <USB_MainTask+0x52>
     1d2:	80 91 e8 00 	lds	r24, 0x00E8
     1d6:	85 ff       	sbrs	r24, 5
     1d8:	12 c0       	rjmp	.+36     	; 0x1fe <USB_MainTask+0x52>
    {
      if(dataToHostSize)
        Endpoint_Write_Stream_LE(dataToHost,dataToHostSize);
     1da:	80 91 0a 01 	lds	r24, 0x010A
     1de:	90 91 0b 01 	lds	r25, 0x010B
     1e2:	12 d6       	rcall	.+3108   	; 0xe08 <Endpoint_Write_Stream_LE>
      
      /* Handshake the IN Endpoint - send the data to the host */
      //Endpoint_ClearCurrentBank();
      Endpoint_ClearIN();
     1e4:	80 91 e8 00 	lds	r24, 0x00E8
     1e8:	98 2f       	mov	r25, r24
     1ea:	9e 7f       	andi	r25, 0xFE	; 254
     1ec:	90 93 e8 00 	sts	0x00E8, r25
     1f0:	8f 77       	andi	r24, 0x7F	; 127
     1f2:	80 93 e8 00 	sts	0x00E8, r24
      
      dataToHostSize=0;
     1f6:	10 92 0f 01 	sts	0x010F, r1
     1fa:	10 92 0e 01 	sts	0x010E, r1
    }

    Endpoint_SelectEndpoint(OUT_EP);
     1fe:	82 e0       	ldi	r24, 0x02	; 2
     200:	80 93 e9 00 	sts	0x00E9, r24

    if (Endpoint_IsReadWriteAllowed())
     204:	80 91 e8 00 	lds	r24, 0x00E8
     208:	85 ff       	sbrs	r24, 5
     20a:	e7 c0       	rjmp	.+462    	; 0x3da <USB_MainTask+0x22e>
			static inline uint16_t Endpoint_Read_Word_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_Read_Word_LE(void)
			{
				uint16_t Data;
				
				Data  = UEDATX;
     20c:	60 91 f1 00 	lds	r22, 0x00F1
     210:	70 e0       	ldi	r23, 0x00	; 0
				Data |= (((uint16_t)UEDATX) << 8);
     212:	20 91 f1 00 	lds	r18, 0x00F1
     216:	92 2f       	mov	r25, r18
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	68 2b       	or	r22, r24
     21c:	79 2b       	or	r23, r25
    {
	  dataFromHostSize = Endpoint_Read_Word_LE();
     21e:	70 93 0d 01 	sts	0x010D, r23
     222:	60 93 0c 01 	sts	0x010C, r22
	  Endpoint_Read_Stream_LE(dataFromHost, dataFromHostSize);
     226:	80 91 08 01 	lds	r24, 0x0108
     22a:	90 91 09 01 	lds	r25, 0x0109
     22e:	1d d6       	rcall	.+3130   	; 0xe6a <Endpoint_Read_Stream_LE>
	  Endpoint_ClearOUT();
     230:	80 91 e8 00 	lds	r24, 0x00E8
     234:	98 2f       	mov	r25, r24
     236:	9b 7f       	andi	r25, 0xFB	; 251
     238:	90 93 e8 00 	sts	0x00E8, r25
     23c:	8f 77       	andi	r24, 0x7F	; 127
     23e:	80 93 e8 00 	sts	0x00E8, r24
	  if(dataFromHostSize>0)
     242:	80 91 0c 01 	lds	r24, 0x010C
     246:	90 91 0d 01 	lds	r25, 0x010D
     24a:	00 97       	sbiw	r24, 0x00	; 0
     24c:	09 f4       	brne	.+2      	; 0x250 <USB_MainTask+0xa4>
     24e:	c5 c0       	rjmp	.+394    	; 0x3da <USB_MainTask+0x22e>
      {        
        Led2_toggle();
     250:	78 9a       	sbi	0x0f, 0	; 15
		
		//first byte is always the command
        dataFromHostSize--;
     252:	9c 01       	movw	r18, r24
     254:	21 50       	subi	r18, 0x01	; 1
     256:	30 40       	sbci	r19, 0x00	; 0
     258:	30 93 0d 01 	sts	0x010D, r19
     25c:	20 93 0c 01 	sts	0x010C, r18
        
        dataToHostSize=0;
     260:	10 92 0f 01 	sts	0x010F, r1
     264:	10 92 0e 01 	sts	0x010E, r1
        
        switch( dataFromHost[0] &JTAG_CMD_MASK ) 
     268:	e0 91 08 01 	lds	r30, 0x0108
     26c:	f0 91 09 01 	lds	r31, 0x0109
     270:	80 81       	ld	r24, Z
     272:	c8 2f       	mov	r28, r24
     274:	d0 e0       	ldi	r29, 0x00	; 0
     276:	cf 70       	andi	r28, 0x0F	; 15
     278:	d0 70       	andi	r29, 0x00	; 0
     27a:	c3 30       	cpi	r28, 0x03	; 3
     27c:	d1 05       	cpc	r29, r1
     27e:	09 f4       	brne	.+2      	; 0x282 <USB_MainTask+0xd6>
     280:	6c c0       	rjmp	.+216    	; 0x35a <USB_MainTask+0x1ae>
     282:	c4 30       	cpi	r28, 0x04	; 4
     284:	d1 05       	cpc	r29, r1
     286:	5c f4       	brge	.+22     	; 0x29e <USB_MainTask+0xf2>
     288:	c1 30       	cpi	r28, 0x01	; 1
     28a:	d1 05       	cpc	r29, r1
     28c:	09 f4       	brne	.+2      	; 0x290 <USB_MainTask+0xe4>
     28e:	71 c0       	rjmp	.+226    	; 0x372 <USB_MainTask+0x1c6>
     290:	c2 30       	cpi	r28, 0x02	; 2
     292:	d1 05       	cpc	r29, r1
     294:	0c f0       	brlt	.+2      	; 0x298 <USB_MainTask+0xec>
     296:	69 c0       	rjmp	.+210    	; 0x36a <USB_MainTask+0x1be>
     298:	cd 2b       	or	r28, r29
     29a:	61 f0       	breq	.+24     	; 0x2b4 <USB_MainTask+0x108>
     29c:	9e c0       	rjmp	.+316    	; 0x3da <USB_MainTask+0x22e>
     29e:	c5 30       	cpi	r28, 0x05	; 5
     2a0:	d1 05       	cpc	r29, r1
     2a2:	09 f4       	brne	.+2      	; 0x2a6 <USB_MainTask+0xfa>
     2a4:	73 c0       	rjmp	.+230    	; 0x38c <USB_MainTask+0x1e0>
     2a6:	c5 30       	cpi	r28, 0x05	; 5
     2a8:	d1 05       	cpc	r29, r1
     2aa:	ac f1       	brlt	.+106    	; 0x316 <USB_MainTask+0x16a>
     2ac:	26 97       	sbiw	r28, 0x06	; 6
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <USB_MainTask+0x106>
     2b0:	94 c0       	rjmp	.+296    	; 0x3da <USB_MainTask+0x22e>
     2b2:	7c c0       	rjmp	.+248    	; 0x3ac <USB_MainTask+0x200>
        {
          
        
		case JTAG_CMD_TAP_OUTPUT:
          
          dataFromHostSize*=4;
     2b4:	22 0f       	add	r18, r18
     2b6:	33 1f       	adc	r19, r19
     2b8:	22 0f       	add	r18, r18
     2ba:	33 1f       	adc	r19, r19
     2bc:	30 93 0d 01 	sts	0x010D, r19
     2c0:	20 93 0c 01 	sts	0x010C, r18

          if( dataFromHost[0] & JTAG_DATA_MASK )
     2c4:	90 81       	ld	r25, Z
     2c6:	89 2f       	mov	r24, r25
     2c8:	80 7f       	andi	r24, 0xF0	; 240
     2ca:	51 f0       	breq	.+20     	; 0x2e0 <USB_MainTask+0x134>
            dataFromHostSize-= (4- ((dataFromHost[0] & JTAG_DATA_MASK)>>4));
     2cc:	24 50       	subi	r18, 0x04	; 4
     2ce:	30 40       	sbci	r19, 0x00	; 0
     2d0:	92 95       	swap	r25
     2d2:	9f 70       	andi	r25, 0x0F	; 15
     2d4:	29 0f       	add	r18, r25
     2d6:	31 1d       	adc	r19, r1
     2d8:	30 93 0d 01 	sts	0x010D, r19
     2dc:	20 93 0c 01 	sts	0x010C, r18
          if(jtag_delay)
     2e0:	80 91 11 01 	lds	r24, 0x0111
     2e4:	90 91 12 01 	lds	r25, 0x0112
     2e8:	40 91 0a 01 	lds	r20, 0x010A
     2ec:	50 91 0b 01 	lds	r21, 0x010B
     2f0:	60 91 0c 01 	lds	r22, 0x010C
     2f4:	70 91 0d 01 	lds	r23, 0x010D
     2f8:	9f 01       	movw	r18, r30
     2fa:	2f 5f       	subi	r18, 0xFF	; 255
     2fc:	3f 4f       	sbci	r19, 0xFF	; 255
     2fe:	89 2b       	or	r24, r25
     300:	19 f0       	breq	.+6      	; 0x308 <USB_MainTask+0x15c>
            dataToHostSize= jtag_tap_output_with_delay( &dataFromHost[1] , dataFromHostSize, dataToHost);
     302:	c9 01       	movw	r24, r18
     304:	c1 d1       	rcall	.+898    	; 0x688 <jtag_tap_output_with_delay>
     306:	02 c0       	rjmp	.+4      	; 0x30c <USB_MainTask+0x160>
          else
            dataToHostSize= jtag_tap_output_max_speed( &dataFromHost[1] , dataFromHostSize, dataToHost);
     308:	c9 01       	movw	r24, r18
     30a:	1c d1       	rcall	.+568    	; 0x544 <jtag_tap_output_max_speed>
     30c:	80 93 0e 01 	sts	0x010E, r24
     310:	10 92 0f 01 	sts	0x010F, r1
     314:	62 c0       	rjmp	.+196    	; 0x3da <USB_MainTask+0x22e>
          break;
          
        case JTAG_CMD_TAP_OUTPUT_EMU:
          dataFromHostSize*=4;
     316:	22 0f       	add	r18, r18
     318:	33 1f       	adc	r19, r19
     31a:	22 0f       	add	r18, r18
     31c:	33 1f       	adc	r19, r19
     31e:	30 93 0d 01 	sts	0x010D, r19
     322:	20 93 0c 01 	sts	0x010C, r18
          if(dataFromHost[0]&JTAG_DATA_MASK)
     326:	90 81       	ld	r25, Z
     328:	89 2f       	mov	r24, r25
     32a:	80 7f       	andi	r24, 0xF0	; 240
     32c:	51 f0       	breq	.+20     	; 0x342 <USB_MainTask+0x196>
            dataFromHostSize-=(4- ((dataFromHost[0]&JTAG_DATA_MASK)>>4));
     32e:	24 50       	subi	r18, 0x04	; 4
     330:	30 40       	sbci	r19, 0x00	; 0
     332:	92 95       	swap	r25
     334:	9f 70       	andi	r25, 0x0F	; 15
     336:	29 0f       	add	r18, r25
     338:	31 1d       	adc	r19, r1
     33a:	30 93 0d 01 	sts	0x010D, r19
     33e:	20 93 0c 01 	sts	0x010C, r18
          
          dataToHostSize=jtag_tap_output_emu(&dataFromHost[1], dataFromHostSize, dataToHost);
     342:	60 91 0c 01 	lds	r22, 0x010C
     346:	70 91 0d 01 	lds	r23, 0x010D
     34a:	40 91 0a 01 	lds	r20, 0x010A
     34e:	50 91 0b 01 	lds	r21, 0x010B
     352:	cf 01       	movw	r24, r30
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	57 d2       	rcall	.+1198   	; 0x806 <jtag_tap_output_emu>
     358:	d9 cf       	rjmp	.-78     	; 0x30c <USB_MainTask+0x160>
          
          break;
          
        case JTAG_CMD_READ_INPUT:
          dataToHost[0]=jtag_read_input();
     35a:	00 91 0a 01 	lds	r16, 0x010A
     35e:	10 91 0b 01 	lds	r17, 0x010B
     362:	22 d3       	rcall	.+1604   	; 0x9a8 <jtag_read_input>
     364:	f8 01       	movw	r30, r16
     366:	80 83       	st	Z, r24
     368:	32 c0       	rjmp	.+100    	; 0x3ce <USB_MainTask+0x222>
          dataToHostSize=1;
          break;
        
        case JTAG_CMD_SET_SRST:
          jtag_set_srst(dataFromHost[1]&1);
     36a:	81 81       	ldd	r24, Z+1	; 0x01
     36c:	81 70       	andi	r24, 0x01	; 1
     36e:	31 d3       	rcall	.+1634   	; 0x9d2 <jtag_set_srst>
     370:	29 c0       	rjmp	.+82     	; 0x3c4 <USB_MainTask+0x218>
          dataToHost[0]=0;//TODO: what to output here?
          dataToHostSize=1;
          break;
        
        case JTAG_CMD_SET_TRST:
          jtag_set_trst(dataFromHost[1]&1);
     372:	81 81       	ldd	r24, Z+1	; 0x01
     374:	81 70       	andi	r24, 0x01	; 1
     376:	28 d3       	rcall	.+1616   	; 0x9c8 <jtag_set_trst>
          dataToHost[0]=0;//TODO: what to output here?
     378:	e0 91 0a 01 	lds	r30, 0x010A
     37c:	f0 91 0b 01 	lds	r31, 0x010B
     380:	10 82       	st	Z, r1
          dataToHostSize=1;
     382:	d0 93 0f 01 	sts	0x010F, r29
     386:	c0 93 0e 01 	sts	0x010E, r28
     38a:	27 c0       	rjmp	.+78     	; 0x3da <USB_MainTask+0x22e>
          break;
        
        case JTAG_CMD_SET_DELAY:
          jtag_delay=dataFromHost[1]*256;
     38c:	81 81       	ldd	r24, Z+1	; 0x01
     38e:	10 92 11 01 	sts	0x0111, r1
     392:	80 93 12 01 	sts	0x0112, r24
          dataToHost[0]=0;//TODO: what to output here?
     396:	e0 91 0a 01 	lds	r30, 0x010A
     39a:	f0 91 0b 01 	lds	r31, 0x010B
     39e:	10 82       	st	Z, r1
          dataToHostSize=1;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	90 93 0f 01 	sts	0x010F, r25
     3a8:	80 93 0e 01 	sts	0x010E, r24

        case JTAG_CMD_SET_SRST_TRST:
          jtag_set_trst_srst(dataFromHost[1]&2?1:0,dataFromHost[1]&1);
     3ac:	e0 91 08 01 	lds	r30, 0x0108
     3b0:	f0 91 09 01 	lds	r31, 0x0109
     3b4:	61 81       	ldd	r22, Z+1	; 0x01
     3b6:	86 2f       	mov	r24, r22
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	96 95       	lsr	r25
     3bc:	87 95       	ror	r24
     3be:	61 70       	andi	r22, 0x01	; 1
     3c0:	81 70       	andi	r24, 0x01	; 1
     3c2:	0e d3       	rcall	.+1564   	; 0x9e0 <jtag_set_trst_srst>
          dataToHost[0]=0;//TODO: what to output here?
     3c4:	e0 91 0a 01 	lds	r30, 0x010A
     3c8:	f0 91 0b 01 	lds	r31, 0x010B
     3cc:	10 82       	st	Z, r1
          dataToHostSize=1;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	90 93 0f 01 	sts	0x010F, r25
     3d6:	80 93 0e 01 	sts	0x010E, r24
          break;
        }
      }
    }
	}
}
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	08 95       	ret

000003e4 <EVENT_USB_ConfigurationChanged>:
 *  of the USB device after enumeration, and configures the keyboard device endpoints.
 */
void EVENT_USB_ConfigurationChanged(void)
{
	/* Setup Keyboard Keycode Report Endpoint */
	Endpoint_ConfigureEndpoint(IN_EP, EP_TYPE_BULK,
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	61 e8       	ldi	r22, 0x81	; 129
     3e8:	42 e3       	ldi	r20, 0x32	; 50
     3ea:	b4 d4       	rcall	.+2408   	; 0xd54 <Endpoint_ConfigureEndpoint_Prv>

	/* Enable the endpoint IN interrupt ISR for data being sent TO the host */
	//USB_INT_Enable(ENDPOINT_INT_IN);

	/* Setup Keyboard LED Report Endpoint */
	Endpoint_ConfigureEndpoint(OUT_EP, EP_TYPE_BULK,
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	60 e8       	ldi	r22, 0x80	; 128
     3f0:	42 e3       	ldi	r20, 0x32	; 50
     3f2:	b0 d4       	rcall	.+2400   	; 0xd54 <Endpoint_ConfigureEndpoint_Prv>

	/* Enable the endpoint OUT interrupt ISR for data recevied FROM the host */
	//USB_INT_Enable(ENDPOINT_INT_OUT);

	/* start USB_USBTask */
	Scheduler_SetTaskMode(USB_MainTask, TASK_RUN);
     3f4:	86 ed       	ldi	r24, 0xD6	; 214
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	61 e0       	ldi	r22, 0x01	; 1
     3fa:	fa d2       	rcall	.+1524   	; 0x9f0 <Scheduler_SetTaskMode>
  
  // pull lines TRST and SRST high
  JTAG_OUT=(1<<JTAG_PIN_TRST)|(1<<JTAG_PIN_SRST);
     3fc:	81 e1       	ldi	r24, 0x11	; 17
     3fe:	85 b9       	out	0x05, r24	; 5
  
}
     400:	08 95       	ret

00000402 <EVENT_USB_Disconnect>:
/** Event handler for the USB_Disconnect event.
 */
void EVENT_USB_Disconnect(void)
{
	/* Stop running keyboard reporting and USB management tasks */
	Scheduler_SetTaskMode(USB_MainTask, TASK_STOP);
     402:	86 ed       	ldi	r24, 0xD6	; 214
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	f3 d2       	rcall	.+1510   	; 0x9f0 <Scheduler_SetTaskMode>
	Scheduler_SetTaskMode(USB_USBTask, TASK_STOP);
     40a:	84 ea       	ldi	r24, 0xA4	; 164
     40c:	98 e0       	ldi	r25, 0x08	; 8
     40e:	60 e0       	ldi	r22, 0x00	; 0
}
     410:	ef c2       	rjmp	.+1502   	; 0x9f0 <Scheduler_SetTaskMode>

00000412 <EVENT_USB_Connect>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Connect(void)
{
 	/* Start USB management task */
	Scheduler_SetTaskMode(USB_USBTask, TASK_RUN);
     412:	84 ea       	ldi	r24, 0xA4	; 164
     414:	98 e0       	ldi	r25, 0x08	; 8
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	eb d2       	rcall	.+1494   	; 0x9f0 <Scheduler_SetTaskMode>
	Scheduler_SetTaskMode(USB_MainTask, TASK_RUN);
     41a:	86 ed       	ldi	r24, 0xD6	; 214
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	61 e0       	ldi	r22, 0x01	; 1
}
     420:	e7 c2       	rjmp	.+1486   	; 0x9f0 <Scheduler_SetTaskMode>

00000422 <main>:

/** Main program entry point. This routine configures the hardware required by the application, then
 *  starts the scheduler to run the USB management task.
 */
int main(void)
{
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     428:	84 b7       	in	r24, 0x34	; 52
     42a:	87 7f       	andi	r24, 0xF7	; 247
     42c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     42e:	88 e1       	ldi	r24, 0x18	; 24
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	80 93 60 00 	sts	0x0060, r24
     438:	10 92 60 00 	sts	0x0060, r1
     43c:	0f be       	out	0x3f, r0	; 63

	/* Disable Clock Division */
	clock_prescale_set(clock_div_1);
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	20 e8       	ldi	r18, 0x80	; 128
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	20 93 61 00 	sts	0x0061, r18
     44c:	80 93 61 00 	sts	0x0061, r24
     450:	0f be       	out	0x3f, r0	; 63
  jtag_init();
     452:	6f d0       	rcall	.+222    	; 0x532 <jtag_init>
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
#endif //DEBUG
  
	// initialize the send and receive buffers
	uint16_t i = 0;
	for (i = 0; i < ESTICK_OUT_BUFFER_SIZE; i++) {
		dataFromHost[i] = 0;
     458:	e0 91 08 01 	lds	r30, 0x0108
     45c:	f0 91 09 01 	lds	r31, 0x0109
     460:	e8 0f       	add	r30, r24
     462:	f9 1f       	adc	r31, r25
     464:	10 82       	st	Z, r1
  SerialStream_Init(9600,0);
#endif //DEBUG
  
	// initialize the send and receive buffers
	uint16_t i = 0;
	for (i = 0; i < ESTICK_OUT_BUFFER_SIZE; i++) {
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	21 e0       	ldi	r18, 0x01	; 1
     46a:	88 36       	cpi	r24, 0x68	; 104
     46c:	92 07       	cpc	r25, r18
     46e:	a1 f7       	brne	.-24     	; 0x458 <main+0x36>
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	90 e0       	ldi	r25, 0x00	; 0
		dataFromHost[i] = 0;
	}

	for (i = 0; i < ESTICK_IN_BUFFER_SIZE; i++) {
		dataToHost[i] = 0;
     474:	e0 91 0a 01 	lds	r30, 0x010A
     478:	f0 91 0b 01 	lds	r31, 0x010B
     47c:	e8 0f       	add	r30, r24
     47e:	f9 1f       	adc	r31, r25
     480:	10 82       	st	Z, r1
	uint16_t i = 0;
	for (i = 0; i < ESTICK_OUT_BUFFER_SIZE; i++) {
		dataFromHost[i] = 0;
	}

	for (i = 0; i < ESTICK_IN_BUFFER_SIZE; i++) {
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	88 36       	cpi	r24, 0x68	; 104
     488:	92 07       	cpc	r25, r18
     48a:	a1 f7       	brne	.-24     	; 0x474 <main+0x52>
		dataToHost[i] = 0;
	}
  dataFromHostSize=0;
     48c:	10 92 0d 01 	sts	0x010D, r1
     490:	10 92 0c 01 	sts	0x010C, r1
  dataToHostSize=0;
     494:	10 92 0f 01 	sts	0x010F, r1
     498:	10 92 0e 01 	sts	0x010E, r1
  resetJtagTransfers=0;
     49c:	10 92 10 01 	sts	0x0110, r1

		/* Inline Functions: */
			static inline void Scheduler_InitScheduler(const uint8_t TotalTasks) ATTR_ALWAYS_INLINE;
			static inline void Scheduler_InitScheduler(const uint8_t TotalTasks)
			{
				Scheduler_TotalTasks = TotalTasks;
     4a0:	12 e0       	ldi	r17, 0x02	; 2
     4a2:	10 93 7d 02 	sts	0x027D, r17

 	/* Initialize Scheduler so that it can be used */
	Scheduler_Init();

	/* Initialize USB Subsystem */
	USB_Init();
     4a6:	72 d5       	rcall	.+2788   	; 0xf8c <USB_Init>
     4a8:	10 93 7d 02 	sts	0x027D, r17
     4ac:	c0 e0       	ldi	r28, 0x00	; 0
     4ae:	d1 e0       	ldi	r29, 0x01	; 1
				{
					TaskEntry_t* CurrTask = &Scheduler_TaskList[0];
					
					while (CurrTask != &Scheduler_TaskList[TotalTasks])
					{
						if (CurrTask->TaskStatus == TASK_RUN)
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	88 23       	and	r24, r24
     4b4:	19 f0       	breq	.+6      	; 0x4bc <main+0x9a>
						  CurrTask->Task();
     4b6:	e8 81       	ld	r30, Y
     4b8:	f9 81       	ldd	r31, Y+1	; 0x01
     4ba:	09 95       	icall

						CurrTask++;
     4bc:	24 96       	adiw	r28, 0x04	; 4

				for (;;)
				{
					TaskEntry_t* CurrTask = &Scheduler_TaskList[0];
					
					while (CurrTask != &Scheduler_TaskList[TotalTasks])
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	c8 30       	cpi	r28, 0x08	; 8
     4c2:	d8 07       	cpc	r29, r24
     4c4:	a9 f7       	brne	.-22     	; 0x4b0 <main+0x8e>
     4c6:	28 97       	sbiw	r28, 0x08	; 8
     4c8:	f3 cf       	rjmp	.-26     	; 0x4b0 <main+0x8e>

000004ca <CALLBACK_USB_GetDescriptor>:
 *  to the USB library. When the device recieves a Get Descriptor request on the control endpoint, this function
 *  is called so that the descriptor details can be passed back and the appropriate descriptor sent back to the
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)
{
     4ca:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     4cc:	92 30       	cpi	r25, 0x02	; 2
     4ce:	49 f0       	breq	.+18     	; 0x4e2 <CALLBACK_USB_GetDescriptor+0x18>
     4d0:	93 30       	cpi	r25, 0x03	; 3
     4d2:	61 f0       	breq	.+24     	; 0x4ec <CALLBACK_USB_GetDescriptor+0x22>
     4d4:	91 30       	cpi	r25, 0x01	; 1
     4d6:	29 f5       	brne	.+74     	; 0x522 <CALLBACK_USB_GetDescriptor+0x58>
     4d8:	ec ea       	ldi	r30, 0xAC	; 172
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	22 e1       	ldi	r18, 0x12	; 18
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	24 c0       	rjmp	.+72     	; 0x52a <CALLBACK_USB_GetDescriptor+0x60>
     4e2:	ee eb       	ldi	r30, 0xBE	; 190
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	20 e2       	ldi	r18, 0x20	; 32
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	1f c0       	rjmp	.+62     	; 0x52a <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_Configuration:
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	59 f0       	breq	.+22     	; 0x506 <CALLBACK_USB_GetDescriptor+0x3c>
     4f0:	81 30       	cpi	r24, 0x01	; 1
     4f2:	28 f0       	brcs	.+10     	; 0x4fe <CALLBACK_USB_GetDescriptor+0x34>
     4f4:	82 30       	cpi	r24, 0x02	; 2
     4f6:	59 f0       	breq	.+22     	; 0x50e <CALLBACK_USB_GetDescriptor+0x44>
     4f8:	83 30       	cpi	r24, 0x03	; 3
     4fa:	99 f4       	brne	.+38     	; 0x522 <CALLBACK_USB_GetDescriptor+0x58>
     4fc:	0c c0       	rjmp	.+24     	; 0x516 <CALLBACK_USB_GetDescriptor+0x4c>
			{
				case 0x00:
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     4fe:	ee ed       	ldi	r30, 0xDE	; 222
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	84 91       	lpm	r24, Z+
     504:	0b c0       	rjmp	.+22     	; 0x51c <CALLBACK_USB_GetDescriptor+0x52>
					break;
				case 0x01:
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     506:	e2 ee       	ldi	r30, 0xE2	; 226
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	84 91       	lpm	r24, Z+
     50c:	07 c0       	rjmp	.+14     	; 0x51c <CALLBACK_USB_GetDescriptor+0x52>
					break;
				case 0x02:
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     50e:	e0 e1       	ldi	r30, 0x10	; 16
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	84 91       	lpm	r24, Z+
     514:	03 c0       	rjmp	.+6      	; 0x51c <CALLBACK_USB_GetDescriptor+0x52>
					break;
				case 0x03:
					Address = (void*)&SerialNumberString;
					Size    = pgm_read_byte(&SerialNumberString.Header.Size);
     516:	ea e2       	ldi	r30, 0x2A	; 42
     518:	f1 e0       	ldi	r31, 0x01	; 1
     51a:	84 91       	lpm	r24, Z+
     51c:	28 2f       	mov	r18, r24
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	04 c0       	rjmp	.+8      	; 0x52a <CALLBACK_USB_GetDescriptor+0x60>
     522:	e0 e0       	ldi	r30, 0x00	; 0
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;	
     52a:	ed 93       	st	X+, r30
     52c:	fc 93       	st	X, r31
	return Size;
}
     52e:	c9 01       	movw	r24, r18
     530:	08 95       	ret

00000532 <jtag_init>:
uint16_t jtag_delay=0;

//! initialize JTAG interface
void jtag_init(void)
{
  Leds_init();
     532:	80 b3       	in	r24, 0x10	; 16
     534:	83 60       	ori	r24, 0x03	; 3
     536:	80 bb       	out	0x10, r24	; 16
  JTAG_OUT=0;
     538:	15 b8       	out	0x05, r1	; 5
  JTAG_DIR=JTAG_OUTPUT_MASK;
     53a:	87 e9       	ldi	r24, 0x97	; 151
     53c:	84 b9       	out	0x04, r24	; 4
  JTAG_OUT=(1<<JTAG_PIN_TRST)|(1<<JTAG_PIN_SRST); //passive state high
     53e:	81 e1       	ldi	r24, 0x11	; 17
     540:	85 b9       	out	0x05, r24	; 5
}
     542:	08 95       	ret

00000544 <jtag_tap_output_max_speed>:
//! \parameter out_buffer - buffer of taps for output, data is packed TDI and TMS values a stored together 
//! \parameter out_length - total number of pairs to send (maximum length is 4*255 samples)
//! \parameter in_buffer  - buffer which will hold recieved data data will be packed 
//! \return    number of bytes used in the in_buffer 
uint8_t jtag_tap_output_max_speed(const uint8_t *out_buffer, uint16_t out_length, uint8_t *in_buffer)
{
     544:	af 92       	push	r10
     546:	bf 92       	push	r11
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	5a 01       	movw	r10, r20
     55a:	6c 01       	movw	r12, r24
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	c0 e0       	ldi	r28, 0x00	; 0
     560:	d0 e0       	ldi	r29, 0x00	; 0
     562:	40 e0       	ldi	r20, 0x00	; 0
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	a1 e0       	ldi	r26, 0x01	; 1
     568:	b0 e0       	ldi	r27, 0x00	; 0
     56a:	93 e0       	ldi	r25, 0x03	; 3
     56c:	e9 2e       	mov	r14, r25
     56e:	f1 2c       	mov	r15, r1
     570:	02 e0       	ldi	r16, 0x02	; 2
     572:	10 e0       	ldi	r17, 0x00	; 0
  printf("Sending %d bits \r\n", dataFromHostSize);
#endif

  while(1)
  {
    out_data = out_buffer[out_buffer_index++];
     574:	f6 01       	movw	r30, r12
     576:	30 81       	ld	r19, Z

    //First TMS/TDI/TDO
    tms_tdi = out_data & JTAG_SIGNAL_MASK;
    JTAG_OUT = ( JTAG_OUT & ( ~JTAG_SIGNAL_MASK ) ) | tms_tdi;
     578:	85 b1       	in	r24, 0x05	; 5
     57a:	93 2f       	mov	r25, r19
     57c:	94 78       	andi	r25, 0x84	; 132
     57e:	8b 77       	andi	r24, 0x7B	; 123
     580:	98 2b       	or	r25, r24
     582:	95 b9       	out	0x05, r25	; 5
    JTAG_OUT|=JTAG_CLK_HI;//CLK hi
     584:	29 9a       	sbi	0x05, 1	; 5
    asm("nop");
     586:	00 00       	nop
    JTAG_OUT&=JTAG_CLK_LO;//CLK lo
     588:	29 98       	cbi	0x05, 1	; 5
    
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_TDO))&0x80);
     58a:	83 b1       	in	r24, 0x03	; 3
     58c:	26 95       	lsr	r18
     58e:	82 95       	swap	r24
     590:	80 78       	andi	r24, 0x80	; 128
     592:	28 2b       	or	r18, r24
    out_length_index++;
    if(out_length_index>=out_length)
     594:	a6 17       	cp	r26, r22
     596:	b7 07       	cpc	r27, r23
     598:	08 f0       	brcs	.+2      	; 0x59c <jtag_tap_output_max_speed+0x58>
     59a:	51 c0       	rjmp	.+162    	; 0x63e <jtag_tap_output_max_speed+0xfa>
      break;
    
    //Second TMS/TDI/TDO
    out_data = out_data>>2;
     59c:	e3 2f       	mov	r30, r19
     59e:	e6 95       	lsr	r30
     5a0:	e6 95       	lsr	r30
    tms_tdi = out_data & JTAG_SIGNAL_MASK;
    JTAG_OUT = ( JTAG_OUT & ( ~JTAG_SIGNAL_MASK ) ) | tms_tdi;
     5a2:	85 b1       	in	r24, 0x05	; 5
     5a4:	9e 2f       	mov	r25, r30
     5a6:	94 78       	andi	r25, 0x84	; 132
     5a8:	8b 77       	andi	r24, 0x7B	; 123
     5aa:	98 2b       	or	r25, r24
     5ac:	95 b9       	out	0x05, r25	; 5
    JTAG_OUT|=JTAG_CLK_HI;//CLK hi
     5ae:	29 9a       	sbi	0x05, 1	; 5
    asm("nop");
     5b0:	00 00       	nop
    JTAG_OUT&=JTAG_CLK_LO;//CLK lo
     5b2:	29 98       	cbi	0x05, 1	; 5
    
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_TDO))&0x80);
     5b4:	83 b1       	in	r24, 0x03	; 3
     5b6:	26 95       	lsr	r18
     5b8:	82 95       	swap	r24
     5ba:	80 78       	andi	r24, 0x80	; 128
     5bc:	28 2b       	or	r18, r24
    out_length_index++;
    if(out_length_index>=out_length)
     5be:	06 17       	cp	r16, r22
     5c0:	17 07       	cpc	r17, r23
     5c2:	10 f0       	brcs	.+4      	; 0x5c8 <jtag_tap_output_max_speed+0x84>
     5c4:	d8 01       	movw	r26, r16
     5c6:	3b c0       	rjmp	.+118    	; 0x63e <jtag_tap_output_max_speed+0xfa>
      break;
    
    //Third TMS/TDI/TDO
    out_data = out_data>>2;
    tms_tdi = out_data & JTAG_SIGNAL_MASK;
    JTAG_OUT = ( JTAG_OUT & ( ~JTAG_SIGNAL_MASK ) ) | tms_tdi;
     5c8:	85 b1       	in	r24, 0x05	; 5
     5ca:	e6 95       	lsr	r30
     5cc:	e6 95       	lsr	r30
     5ce:	e4 78       	andi	r30, 0x84	; 132
     5d0:	8b 77       	andi	r24, 0x7B	; 123
     5d2:	e8 2b       	or	r30, r24
     5d4:	e5 b9       	out	0x05, r30	; 5
    JTAG_OUT|=JTAG_CLK_HI;//CLK hi
     5d6:	29 9a       	sbi	0x05, 1	; 5
    asm("nop");
     5d8:	00 00       	nop
    JTAG_OUT&=JTAG_CLK_LO;//CLK lo
     5da:	29 98       	cbi	0x05, 1	; 5
    
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_TDO))&0x80);
     5dc:	83 b1       	in	r24, 0x03	; 3
     5de:	26 95       	lsr	r18
     5e0:	82 95       	swap	r24
     5e2:	80 78       	andi	r24, 0x80	; 128
     5e4:	28 2b       	or	r18, r24
    out_length_index++;
    if(out_length_index>=out_length)
     5e6:	e6 16       	cp	r14, r22
     5e8:	f7 06       	cpc	r15, r23
     5ea:	10 f0       	brcs	.+4      	; 0x5f0 <jtag_tap_output_max_speed+0xac>
     5ec:	d7 01       	movw	r26, r14
     5ee:	27 c0       	rjmp	.+78     	; 0x63e <jtag_tap_output_max_speed+0xfa>
      break;

    //Fourth TMS/TDI/TDO
    out_data = out_data>>2;
    tms_tdi = out_data & JTAG_SIGNAL_MASK;
    JTAG_OUT = ( JTAG_OUT & ( ~JTAG_SIGNAL_MASK ) ) | tms_tdi;
     5f0:	85 b1       	in	r24, 0x05	; 5
     5f2:	8b 77       	andi	r24, 0x7B	; 123
     5f4:	85 b9       	out	0x05, r24	; 5
    JTAG_OUT|=JTAG_CLK_HI;//CLK hi
     5f6:	29 9a       	sbi	0x05, 1	; 5
    asm("nop");
     5f8:	00 00       	nop
    JTAG_OUT&=JTAG_CLK_LO;//CLK lo
     5fa:	29 98       	cbi	0x05, 1	; 5
    
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_TDO))&0x80);
     5fc:	83 b1       	in	r24, 0x03	; 3
     5fe:	26 95       	lsr	r18
     600:	82 95       	swap	r24
     602:	80 78       	andi	r24, 0x80	; 128
     604:	28 2b       	or	r18, r24
     606:	4c 5f       	subi	r20, 0xFC	; 252
     608:	5f 4f       	sbci	r21, 0xFF	; 255
    out_length_index++;    
    if(!(out_length_index%8))
     60a:	ca 01       	movw	r24, r20
     60c:	87 70       	andi	r24, 0x07	; 7
     60e:	90 70       	andi	r25, 0x00	; 0
     610:	89 2b       	or	r24, r25
     612:	31 f4       	brne	.+12     	; 0x620 <jtag_tap_output_max_speed+0xdc>
    {
      in_buffer[in_buffer_index] = in_data;
     614:	f5 01       	movw	r30, r10
     616:	ec 0f       	add	r30, r28
     618:	fd 1f       	adc	r31, r29
     61a:	20 83       	st	Z, r18
      in_buffer_index++;
     61c:	21 96       	adiw	r28, 0x01	; 1
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	14 96       	adiw	r26, 0x04	; 4
     622:	08 94       	sec
     624:	c1 1c       	adc	r12, r1
     626:	d1 1c       	adc	r13, r1
     628:	84 e0       	ldi	r24, 0x04	; 4
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	e8 0e       	add	r14, r24
     62e:	f9 1e       	adc	r15, r25
     630:	0c 5f       	subi	r16, 0xFC	; 252
     632:	1f 4f       	sbci	r17, 0xFF	; 255
      in_data = 0;
    }    
    if(out_length_index>=out_length)
     634:	46 17       	cp	r20, r22
     636:	57 07       	cpc	r21, r23
     638:	08 f4       	brcc	.+2      	; 0x63c <jtag_tap_output_max_speed+0xf8>
     63a:	9c cf       	rjmp	.-200    	; 0x574 <jtag_tap_output_max_speed+0x30>
     63c:	da 01       	movw	r26, r20
      break;
  }

  if(out_length_index%8)
     63e:	fd 01       	movw	r30, r26
     640:	e7 70       	andi	r30, 0x07	; 7
     642:	f0 70       	andi	r31, 0x00	; 0
     644:	30 97       	sbiw	r30, 0x00	; 0
     646:	69 f0       	breq	.+26     	; 0x662 <jtag_tap_output_max_speed+0x11e>
    in_buffer[in_buffer_index] = in_data>>(8-(out_length_index%8));
     648:	ca 0d       	add	r28, r10
     64a:	db 1d       	adc	r29, r11
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	88 e0       	ldi	r24, 0x08	; 8
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	8e 1b       	sub	r24, r30
     654:	9f 0b       	sbc	r25, r31
     656:	02 c0       	rjmp	.+4      	; 0x65c <jtag_tap_output_max_speed+0x118>
     658:	35 95       	asr	r19
     65a:	27 95       	ror	r18
     65c:	8a 95       	dec	r24
     65e:	e2 f7       	brpl	.-8      	; 0x658 <jtag_tap_output_max_speed+0x114>
     660:	28 83       	st	Y, r18
     662:	69 5f       	subi	r22, 0xF9	; 249
     664:	7f 4f       	sbci	r23, 0xFF	; 255
     666:	83 e0       	ldi	r24, 0x03	; 3
     668:	76 95       	lsr	r23
     66a:	67 95       	ror	r22
     66c:	8a 95       	dec	r24
     66e:	e1 f7       	brne	.-8      	; 0x668 <jtag_tap_output_max_speed+0x124>
  
  return (out_length+7)/8;
}
     670:	86 2f       	mov	r24, r22
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	df 90       	pop	r13
     680:	cf 90       	pop	r12
     682:	bf 90       	pop	r11
     684:	af 90       	pop	r10
     686:	08 95       	ret

00000688 <jtag_tap_output_with_delay>:
//! \parameter out_buffer - buffer of taps for output, data is packed TDI and TMS values a stored together 
//! \parameter out_length - total number of pairs to send (maximum length is 4*255 samples)
//! \parameter in_buffer  - buffer which will hold recieved data data will be packed 
//! \return    number of bytes used in the in_buffer 
uint8_t jtag_tap_output_with_delay(const uint8_t *out_buffer, uint16_t out_length, uint8_t *in_buffer)
{
     688:	8f 92       	push	r8
     68a:	9f 92       	push	r9
     68c:	af 92       	push	r10
     68e:	bf 92       	push	r11
     690:	cf 92       	push	r12
     692:	df 92       	push	r13
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	4a 01       	movw	r8, r20
     6a2:	5c 01       	movw	r10, r24
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	c0 e0       	ldi	r28, 0x00	; 0
     6a8:	d0 e0       	ldi	r29, 0x00	; 0
     6aa:	00 e0       	ldi	r16, 0x00	; 0
     6ac:	10 e0       	ldi	r17, 0x00	; 0
     6ae:	41 e0       	ldi	r20, 0x01	; 1
     6b0:	c4 2e       	mov	r12, r20
     6b2:	d1 2c       	mov	r13, r1
     6b4:	43 e0       	ldi	r20, 0x03	; 3
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	32 e0       	ldi	r19, 0x02	; 2
     6ba:	e3 2e       	mov	r14, r19
     6bc:	f1 2c       	mov	r15, r1
  printf("Sending %d bits \r\n", dataFromHostSize);
#endif

  while(1)
  {
    out_data = out_buffer[out_buffer_index++];
     6be:	f5 01       	movw	r30, r10
     6c0:	30 81       	ld	r19, Z

    //First TMS/TDI/TDO
    tms_tdi = out_data & JTAG_SIGNAL_MASK;
    JTAG_OUT = ( JTAG_OUT & ( ~JTAG_SIGNAL_MASK ) ) | tms_tdi;
     6c2:	85 b1       	in	r24, 0x05	; 5
     6c4:	93 2f       	mov	r25, r19
     6c6:	94 78       	andi	r25, 0x84	; 132
     6c8:	8b 77       	andi	r24, 0x7B	; 123
     6ca:	98 2b       	or	r25, r24
     6cc:	95 b9       	out	0x05, r25	; 5
    JTAG_OUT|=JTAG_CLK_HI;//CLK hi
     6ce:	29 9a       	sbi	0x05, 1	; 5
    _delay_loop_2(jtag_delay);
     6d0:	a0 91 11 01 	lds	r26, 0x0111
     6d4:	b0 91 12 01 	lds	r27, 0x0112
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6d8:	cd 01       	movw	r24, r26
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	f1 f7       	brne	.-4      	; 0x6da <jtag_tap_output_with_delay+0x52>
    JTAG_OUT&=JTAG_CLK_LO;//CLK lo
     6de:	29 98       	cbi	0x05, 1	; 5
     6e0:	cd 01       	movw	r24, r26
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <jtag_tap_output_with_delay+0x5a>
    _delay_loop_2(jtag_delay);
    
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_TDO))&0x80);
     6e6:	83 b1       	in	r24, 0x03	; 3
     6e8:	26 95       	lsr	r18
     6ea:	82 95       	swap	r24
     6ec:	80 78       	andi	r24, 0x80	; 128
     6ee:	28 2b       	or	r18, r24
    out_length_index++;
    if(out_length_index>=out_length)
     6f0:	c6 16       	cp	r12, r22
     6f2:	d7 06       	cpc	r13, r23
     6f4:	10 f0       	brcs	.+4      	; 0x6fa <jtag_tap_output_with_delay+0x72>
     6f6:	a6 01       	movw	r20, r12
     6f8:	5f c0       	rjmp	.+190    	; 0x7b8 <jtag_tap_output_with_delay+0x130>
      break;
    
    //Second TMS/TDI/TDO
    out_data = out_data>>2;
     6fa:	e3 2f       	mov	r30, r19
     6fc:	e6 95       	lsr	r30
     6fe:	e6 95       	lsr	r30
    tms_tdi = out_data & JTAG_SIGNAL_MASK;
    JTAG_OUT = ( JTAG_OUT & ( ~JTAG_SIGNAL_MASK ) ) | tms_tdi;
     700:	85 b1       	in	r24, 0x05	; 5
     702:	9e 2f       	mov	r25, r30
     704:	94 78       	andi	r25, 0x84	; 132
     706:	8b 77       	andi	r24, 0x7B	; 123
     708:	98 2b       	or	r25, r24
     70a:	95 b9       	out	0x05, r25	; 5
    JTAG_OUT|=JTAG_CLK_HI;//CLK hi
     70c:	29 9a       	sbi	0x05, 1	; 5
     70e:	cd 01       	movw	r24, r26
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	f1 f7       	brne	.-4      	; 0x710 <jtag_tap_output_with_delay+0x88>
    _delay_loop_2(jtag_delay);
    JTAG_OUT&=JTAG_CLK_LO;//CLK lo
     714:	29 98       	cbi	0x05, 1	; 5
     716:	cd 01       	movw	r24, r26
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	f1 f7       	brne	.-4      	; 0x718 <jtag_tap_output_with_delay+0x90>
    _delay_loop_2(jtag_delay);
    
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_TDO))&0x80);
     71c:	83 b1       	in	r24, 0x03	; 3
     71e:	26 95       	lsr	r18
     720:	82 95       	swap	r24
     722:	80 78       	andi	r24, 0x80	; 128
     724:	28 2b       	or	r18, r24
    out_length_index++;
    if(out_length_index>=out_length)
     726:	e6 16       	cp	r14, r22
     728:	f7 06       	cpc	r15, r23
     72a:	10 f0       	brcs	.+4      	; 0x730 <jtag_tap_output_with_delay+0xa8>
     72c:	a7 01       	movw	r20, r14
     72e:	44 c0       	rjmp	.+136    	; 0x7b8 <jtag_tap_output_with_delay+0x130>
      break;
    
    //Third TMS/TDI/TDO
    out_data = out_data>>2;
    tms_tdi = out_data & JTAG_SIGNAL_MASK;
    JTAG_OUT = ( JTAG_OUT & ( ~JTAG_SIGNAL_MASK ) ) | tms_tdi;
     730:	85 b1       	in	r24, 0x05	; 5
     732:	e6 95       	lsr	r30
     734:	e6 95       	lsr	r30
     736:	e4 78       	andi	r30, 0x84	; 132
     738:	8b 77       	andi	r24, 0x7B	; 123
     73a:	e8 2b       	or	r30, r24
     73c:	e5 b9       	out	0x05, r30	; 5
    JTAG_OUT|=JTAG_CLK_HI;//CLK hi
     73e:	29 9a       	sbi	0x05, 1	; 5
     740:	cd 01       	movw	r24, r26
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <jtag_tap_output_with_delay+0xba>
    _delay_loop_2(jtag_delay);
    JTAG_OUT&=JTAG_CLK_LO;//CLK lo
     746:	29 98       	cbi	0x05, 1	; 5
     748:	cd 01       	movw	r24, r26
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	f1 f7       	brne	.-4      	; 0x74a <jtag_tap_output_with_delay+0xc2>
    _delay_loop_2(jtag_delay);
    
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_TDO))&0x80);
     74e:	83 b1       	in	r24, 0x03	; 3
     750:	26 95       	lsr	r18
     752:	82 95       	swap	r24
     754:	80 78       	andi	r24, 0x80	; 128
     756:	28 2b       	or	r18, r24
    out_length_index++;
    if(out_length_index>=out_length)
     758:	46 17       	cp	r20, r22
     75a:	57 07       	cpc	r21, r23
     75c:	68 f5       	brcc	.+90     	; 0x7b8 <jtag_tap_output_with_delay+0x130>
      break;

    //Fourth TMS/TDI/TDO
    out_data = out_data>>2;
    tms_tdi = out_data & JTAG_SIGNAL_MASK;
    JTAG_OUT = ( JTAG_OUT & ( ~JTAG_SIGNAL_MASK ) ) | tms_tdi;
     75e:	85 b1       	in	r24, 0x05	; 5
     760:	8b 77       	andi	r24, 0x7B	; 123
     762:	85 b9       	out	0x05, r24	; 5
    JTAG_OUT|=JTAG_CLK_HI;//CLK hi
     764:	29 9a       	sbi	0x05, 1	; 5
     766:	cd 01       	movw	r24, r26
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <jtag_tap_output_with_delay+0xe0>
    _delay_loop_2(jtag_delay);
    JTAG_OUT&=JTAG_CLK_LO;//CLK lo
     76c:	29 98       	cbi	0x05, 1	; 5
     76e:	cd 01       	movw	r24, r26
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	f1 f7       	brne	.-4      	; 0x770 <jtag_tap_output_with_delay+0xe8>
    _delay_loop_2(jtag_delay);
    
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_TDO))&0x80);
     774:	83 b1       	in	r24, 0x03	; 3
     776:	26 95       	lsr	r18
     778:	82 95       	swap	r24
     77a:	80 78       	andi	r24, 0x80	; 128
     77c:	28 2b       	or	r18, r24
     77e:	0c 5f       	subi	r16, 0xFC	; 252
     780:	1f 4f       	sbci	r17, 0xFF	; 255
    out_length_index++;    
    if(!(out_length_index%8))
     782:	c8 01       	movw	r24, r16
     784:	87 70       	andi	r24, 0x07	; 7
     786:	90 70       	andi	r25, 0x00	; 0
     788:	89 2b       	or	r24, r25
     78a:	31 f4       	brne	.+12     	; 0x798 <jtag_tap_output_with_delay+0x110>
    {
      in_buffer[in_buffer_index] = in_data;
     78c:	f4 01       	movw	r30, r8
     78e:	ec 0f       	add	r30, r28
     790:	fd 1f       	adc	r31, r29
     792:	20 83       	st	Z, r18
      in_buffer_index++;
     794:	21 96       	adiw	r28, 0x01	; 1
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	84 e0       	ldi	r24, 0x04	; 4
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	c8 0e       	add	r12, r24
     79e:	d9 1e       	adc	r13, r25
     7a0:	08 94       	sec
     7a2:	a1 1c       	adc	r10, r1
     7a4:	b1 1c       	adc	r11, r1
     7a6:	4c 5f       	subi	r20, 0xFC	; 252
     7a8:	5f 4f       	sbci	r21, 0xFF	; 255
     7aa:	e8 0e       	add	r14, r24
     7ac:	f9 1e       	adc	r15, r25
      in_data = 0;
    }    
    if(out_length_index>=out_length)
     7ae:	06 17       	cp	r16, r22
     7b0:	17 07       	cpc	r17, r23
     7b2:	08 f4       	brcc	.+2      	; 0x7b6 <jtag_tap_output_with_delay+0x12e>
     7b4:	84 cf       	rjmp	.-248    	; 0x6be <jtag_tap_output_with_delay+0x36>
     7b6:	a8 01       	movw	r20, r16
      break;
  }

  if(out_length_index%8)
     7b8:	fa 01       	movw	r30, r20
     7ba:	e7 70       	andi	r30, 0x07	; 7
     7bc:	f0 70       	andi	r31, 0x00	; 0
     7be:	30 97       	sbiw	r30, 0x00	; 0
     7c0:	69 f0       	breq	.+26     	; 0x7dc <jtag_tap_output_with_delay+0x154>
    in_buffer[in_buffer_index] = in_data>>(8-(out_length_index%8));
     7c2:	c8 0d       	add	r28, r8
     7c4:	d9 1d       	adc	r29, r9
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	88 e0       	ldi	r24, 0x08	; 8
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	8e 1b       	sub	r24, r30
     7ce:	9f 0b       	sbc	r25, r31
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <jtag_tap_output_with_delay+0x14e>
     7d2:	35 95       	asr	r19
     7d4:	27 95       	ror	r18
     7d6:	8a 95       	dec	r24
     7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <jtag_tap_output_with_delay+0x14a>
     7da:	28 83       	st	Y, r18
     7dc:	69 5f       	subi	r22, 0xF9	; 249
     7de:	7f 4f       	sbci	r23, 0xFF	; 255
     7e0:	23 e0       	ldi	r18, 0x03	; 3
     7e2:	76 95       	lsr	r23
     7e4:	67 95       	ror	r22
     7e6:	2a 95       	dec	r18
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <jtag_tap_output_with_delay+0x15a>
  
  return (out_length+7)/8;
}
     7ea:	86 2f       	mov	r24, r22
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	df 90       	pop	r13
     7fa:	cf 90       	pop	r12
     7fc:	bf 90       	pop	r11
     7fe:	af 90       	pop	r10
     800:	9f 90       	pop	r9
     802:	8f 90       	pop	r8
     804:	08 95       	ret

00000806 <jtag_tap_output_emu>:
//! \parameter out_buffer - buffer of taps for output, data is packed TDI and TMS values a stored together 
//! \parameter out_length - total number of pairs to send (maximum length is 4*255 samples)
//! \parameter in_buffer  - buffer which will hold recieved data data will be packed 
//! \return    number of bytes used in the in_buffer (equal to the input (length+3)/4
uint8_t jtag_tap_output_emu(const uint8_t *out_buffer,uint16_t out_length,uint8_t *in_buffer)
{
     806:	af 92       	push	r10
     808:	bf 92       	push	r11
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	5a 01       	movw	r10, r20
     81c:	6c 01       	movw	r12, r24
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	c0 e0       	ldi	r28, 0x00	; 0
     822:	d0 e0       	ldi	r29, 0x00	; 0
     824:	40 e0       	ldi	r20, 0x00	; 0
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	f1 e0       	ldi	r31, 0x01	; 1
     82a:	ef 2e       	mov	r14, r31
     82c:	f1 2c       	mov	r15, r1
     82e:	a3 e0       	ldi	r26, 0x03	; 3
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	02 e0       	ldi	r16, 0x02	; 2
     834:	10 e0       	ldi	r17, 0x00	; 0
  uint16_t in_buffer_index = 0;
  uint16_t out_length_index = 0;

  while(1)
  {
    out_data = out_buffer[out_buffer_index++];
     836:	f6 01       	movw	r30, r12
     838:	30 81       	ld	r19, Z

    //First TMS/TDI/TDO
    tms_tdi = out_data & JTAG_SIGNAL_MASK;
    JTAG_OUT = ( JTAG_OUT & ( ~JTAG_SIGNAL_MASK ) ) | tms_tdi;
     83a:	85 b1       	in	r24, 0x05	; 5
     83c:	93 2f       	mov	r25, r19
     83e:	94 78       	andi	r25, 0x84	; 132
     840:	8b 77       	andi	r24, 0x7B	; 123
     842:	98 2b       	or	r25, r24
     844:	95 b9       	out	0x05, r25	; 5
    JTAG_OUT|=JTAG_CLK_HI;//CLK hi
     846:	29 9a       	sbi	0x05, 1	; 5
    _delay_loop_2(jtag_delay);
     848:	e0 91 11 01 	lds	r30, 0x0111
     84c:	f0 91 12 01 	lds	r31, 0x0112
     850:	cf 01       	movw	r24, r30
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <jtag_tap_output_emu+0x4c>
    JTAG_OUT&=JTAG_CLK_LO;//CLK lo
     856:	29 98       	cbi	0x05, 1	; 5
     858:	cf 01       	movw	r24, r30
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <jtag_tap_output_emu+0x54>
    _delay_loop_2(jtag_delay);
    
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_TDO))&0x80);
     85e:	83 b1       	in	r24, 0x03	; 3
     860:	26 95       	lsr	r18
     862:	82 95       	swap	r24
     864:	80 78       	andi	r24, 0x80	; 128
     866:	28 2b       	or	r18, r24
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_EMU))&0x80);
     868:	83 b1       	in	r24, 0x03	; 3
     86a:	26 95       	lsr	r18
     86c:	88 0f       	add	r24, r24
     86e:	88 0f       	add	r24, r24
     870:	80 78       	andi	r24, 0x80	; 128
     872:	28 2b       	or	r18, r24
    out_length_index++;
    if(out_length_index>=out_length)
     874:	e6 16       	cp	r14, r22
     876:	f7 06       	cpc	r15, r23
     878:	10 f0       	brcs	.+4      	; 0x87e <jtag_tap_output_emu+0x78>
     87a:	d7 01       	movw	r26, r14
     87c:	6f c0       	rjmp	.+222    	; 0x95c <jtag_tap_output_emu+0x156>
      break;
    
    //Second TMS/TDI/TDO
    out_data = out_data>>2;
     87e:	36 95       	lsr	r19
     880:	36 95       	lsr	r19
    tms_tdi = out_data & JTAG_SIGNAL_MASK;
    JTAG_OUT = ( JTAG_OUT & ( ~JTAG_SIGNAL_MASK ) ) | tms_tdi;
     882:	85 b1       	in	r24, 0x05	; 5
     884:	93 2f       	mov	r25, r19
     886:	94 78       	andi	r25, 0x84	; 132
     888:	8b 77       	andi	r24, 0x7B	; 123
     88a:	98 2b       	or	r25, r24
     88c:	95 b9       	out	0x05, r25	; 5
    JTAG_OUT|=JTAG_CLK_HI;//CLK hi
     88e:	29 9a       	sbi	0x05, 1	; 5
     890:	cf 01       	movw	r24, r30
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	f1 f7       	brne	.-4      	; 0x892 <jtag_tap_output_emu+0x8c>
    _delay_loop_2(jtag_delay);
    JTAG_OUT&=JTAG_CLK_LO;//CLK lo
     896:	29 98       	cbi	0x05, 1	; 5
     898:	cf 01       	movw	r24, r30
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <jtag_tap_output_emu+0x94>
    _delay_loop_2(jtag_delay);
    
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_TDO))&0x80);
     89e:	83 b1       	in	r24, 0x03	; 3
     8a0:	26 95       	lsr	r18
     8a2:	82 95       	swap	r24
     8a4:	80 78       	andi	r24, 0x80	; 128
     8a6:	28 2b       	or	r18, r24
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_EMU))&0x80);
     8a8:	83 b1       	in	r24, 0x03	; 3
     8aa:	26 95       	lsr	r18
     8ac:	88 0f       	add	r24, r24
     8ae:	88 0f       	add	r24, r24
     8b0:	80 78       	andi	r24, 0x80	; 128
     8b2:	28 2b       	or	r18, r24
    out_length_index++;
    if(out_length_index>=out_length)
     8b4:	06 17       	cp	r16, r22
     8b6:	17 07       	cpc	r17, r23
     8b8:	10 f0       	brcs	.+4      	; 0x8be <jtag_tap_output_emu+0xb8>
     8ba:	d8 01       	movw	r26, r16
     8bc:	4f c0       	rjmp	.+158    	; 0x95c <jtag_tap_output_emu+0x156>
      break;
    
    //Third TMS/TDI/TDO
    out_data = out_data>>2;
    tms_tdi = out_data & JTAG_SIGNAL_MASK;
    JTAG_OUT = ( JTAG_OUT & ( ~JTAG_SIGNAL_MASK ) ) | tms_tdi;
     8be:	85 b1       	in	r24, 0x05	; 5
     8c0:	36 95       	lsr	r19
     8c2:	36 95       	lsr	r19
     8c4:	34 78       	andi	r19, 0x84	; 132
     8c6:	8b 77       	andi	r24, 0x7B	; 123
     8c8:	38 2b       	or	r19, r24
     8ca:	35 b9       	out	0x05, r19	; 5
    JTAG_OUT|=JTAG_CLK_HI;//CLK hi
     8cc:	29 9a       	sbi	0x05, 1	; 5
     8ce:	cf 01       	movw	r24, r30
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <jtag_tap_output_emu+0xca>
    _delay_loop_2(jtag_delay);
    JTAG_OUT&=JTAG_CLK_LO;//CLK lo
     8d4:	29 98       	cbi	0x05, 1	; 5
     8d6:	cf 01       	movw	r24, r30
     8d8:	01 97       	sbiw	r24, 0x01	; 1
     8da:	f1 f7       	brne	.-4      	; 0x8d8 <jtag_tap_output_emu+0xd2>
    _delay_loop_2(jtag_delay);
    
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_TDO))&0x80);
     8dc:	83 b1       	in	r24, 0x03	; 3
     8de:	26 95       	lsr	r18
     8e0:	82 95       	swap	r24
     8e2:	80 78       	andi	r24, 0x80	; 128
     8e4:	28 2b       	or	r18, r24
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_EMU))&0x80);
     8e6:	83 b1       	in	r24, 0x03	; 3
     8e8:	26 95       	lsr	r18
     8ea:	88 0f       	add	r24, r24
     8ec:	88 0f       	add	r24, r24
     8ee:	80 78       	andi	r24, 0x80	; 128
     8f0:	28 2b       	or	r18, r24
    out_length_index++;
    if(out_length_index>=out_length)
     8f2:	a6 17       	cp	r26, r22
     8f4:	b7 07       	cpc	r27, r23
     8f6:	90 f5       	brcc	.+100    	; 0x95c <jtag_tap_output_emu+0x156>
      break;

    //Fourth TMS/TDI/TDO
    out_data = out_data>>2;
    tms_tdi = out_data & JTAG_SIGNAL_MASK;
    JTAG_OUT = ( JTAG_OUT & ( ~JTAG_SIGNAL_MASK ) ) | tms_tdi;
     8f8:	85 b1       	in	r24, 0x05	; 5
     8fa:	8b 77       	andi	r24, 0x7B	; 123
     8fc:	85 b9       	out	0x05, r24	; 5
    JTAG_OUT|=JTAG_CLK_HI;//CLK hi
     8fe:	29 9a       	sbi	0x05, 1	; 5
     900:	cf 01       	movw	r24, r30
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	f1 f7       	brne	.-4      	; 0x902 <jtag_tap_output_emu+0xfc>
    _delay_loop_2(jtag_delay);
    JTAG_OUT&=JTAG_CLK_LO;//CLK lo
     906:	29 98       	cbi	0x05, 1	; 5
     908:	cf 01       	movw	r24, r30
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	f1 f7       	brne	.-4      	; 0x90a <jtag_tap_output_emu+0x104>
    _delay_loop_2(jtag_delay);
    
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_TDO))&0x80);
     90e:	83 b1       	in	r24, 0x03	; 3
     910:	26 95       	lsr	r18
     912:	82 95       	swap	r24
     914:	80 78       	andi	r24, 0x80	; 128
     916:	28 2b       	or	r18, r24
    in_data = in_data>>1;
    in_data |= ((JTAG_IN<<(7-JTAG_PIN_EMU))&0x80);
     918:	83 b1       	in	r24, 0x03	; 3
     91a:	26 95       	lsr	r18
     91c:	88 0f       	add	r24, r24
     91e:	88 0f       	add	r24, r24
     920:	80 78       	andi	r24, 0x80	; 128
     922:	28 2b       	or	r18, r24
     924:	4c 5f       	subi	r20, 0xFC	; 252
     926:	5f 4f       	sbci	r21, 0xFF	; 255
    out_length_index++;    
    if(!(out_length_index%4))
     928:	ca 01       	movw	r24, r20
     92a:	83 70       	andi	r24, 0x03	; 3
     92c:	90 70       	andi	r25, 0x00	; 0
     92e:	89 2b       	or	r24, r25
     930:	31 f4       	brne	.+12     	; 0x93e <jtag_tap_output_emu+0x138>
    {
      in_buffer[in_buffer_index] = in_data;
     932:	f5 01       	movw	r30, r10
     934:	ec 0f       	add	r30, r28
     936:	fd 1f       	adc	r31, r29
     938:	20 83       	st	Z, r18
      in_buffer_index++;
     93a:	21 96       	adiw	r28, 0x01	; 1
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	84 e0       	ldi	r24, 0x04	; 4
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	e8 0e       	add	r14, r24
     944:	f9 1e       	adc	r15, r25
     946:	08 94       	sec
     948:	c1 1c       	adc	r12, r1
     94a:	d1 1c       	adc	r13, r1
     94c:	14 96       	adiw	r26, 0x04	; 4
     94e:	0c 5f       	subi	r16, 0xFC	; 252
     950:	1f 4f       	sbci	r17, 0xFF	; 255
      in_data = 0;
    }    
    if(out_length_index>=out_length)
     952:	46 17       	cp	r20, r22
     954:	57 07       	cpc	r21, r23
     956:	08 f4       	brcc	.+2      	; 0x95a <jtag_tap_output_emu+0x154>
     958:	6e cf       	rjmp	.-292    	; 0x836 <jtag_tap_output_emu+0x30>
     95a:	da 01       	movw	r26, r20
      break;
  }

  if(out_length_index%4)
     95c:	fd 01       	movw	r30, r26
     95e:	e3 70       	andi	r30, 0x03	; 3
     960:	f0 70       	andi	r31, 0x00	; 0
     962:	30 97       	sbiw	r30, 0x00	; 0
     964:	79 f0       	breq	.+30     	; 0x984 <jtag_tap_output_emu+0x17e>
    in_buffer[in_buffer_index] = in_data>>(8-2*(out_length_index%4));
     966:	ca 0d       	add	r28, r10
     968:	db 1d       	adc	r29, r11
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	84 e0       	ldi	r24, 0x04	; 4
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	8e 1b       	sub	r24, r30
     972:	9f 0b       	sbc	r25, r31
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	02 c0       	rjmp	.+4      	; 0x97e <jtag_tap_output_emu+0x178>
     97a:	35 95       	asr	r19
     97c:	27 95       	ror	r18
     97e:	8a 95       	dec	r24
     980:	e2 f7       	brpl	.-8      	; 0x97a <jtag_tap_output_emu+0x174>
     982:	28 83       	st	Y, r18
     984:	6d 5f       	subi	r22, 0xFD	; 253
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	76 95       	lsr	r23
     98a:	67 95       	ror	r22
     98c:	76 95       	lsr	r23
     98e:	67 95       	ror	r22
  
  return (out_length+3)/4;
}
     990:	86 2f       	mov	r24, r22
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	bf 90       	pop	r11
     9a4:	af 90       	pop	r10
     9a6:	08 95       	ret

000009a8 <jtag_read_input>:

//! return current status of TDO & EMU pins
//! \return packed result TDO - bit 0 , EMU bit 1
uint8_t jtag_read_input(void)
{
    uint8_t data=JTAG_IN;
     9a8:	83 b1       	in	r24, 0x03	; 3
     9aa:	28 2f       	mov	r18, r24
     9ac:	22 95       	swap	r18
     9ae:	26 95       	lsr	r18
     9b0:	27 70       	andi	r18, 0x07	; 7
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	21 70       	andi	r18, 0x01	; 1
     9b6:	30 70       	andi	r19, 0x00	; 0
     9b8:	22 0f       	add	r18, r18
     9ba:	33 1f       	adc	r19, r19
     9bc:	86 95       	lsr	r24
     9be:	86 95       	lsr	r24
     9c0:	86 95       	lsr	r24
     9c2:	81 70       	andi	r24, 0x01	; 1
    return ((data>>JTAG_PIN_TDO)&1)|(((data>>JTAG_PIN_EMU)&1)<<1);
} 
     9c4:	82 2b       	or	r24, r18
     9c6:	08 95       	ret

000009c8 <jtag_set_trst>:

//! set pin TRST 
void jtag_set_trst(uint8_t trst)
{
  JTAG_OUT= (JTAG_OUT&(~(1<<JTAG_PIN_TRST)))|(trst<<JTAG_PIN_TRST);
     9c8:	95 b1       	in	r25, 0x05	; 5
     9ca:	9e 7f       	andi	r25, 0xFE	; 254
     9cc:	98 2b       	or	r25, r24
     9ce:	95 b9       	out	0x05, r25	; 5
} 
     9d0:	08 95       	ret

000009d2 <jtag_set_srst>:

//! set pin SRST 
void jtag_set_srst(uint8_t srst)
{
  JTAG_OUT=(JTAG_OUT&(~(1<<JTAG_PIN_SRST))) |(srst<<JTAG_PIN_SRST);
     9d2:	95 b1       	in	r25, 0x05	; 5
     9d4:	82 95       	swap	r24
     9d6:	80 7f       	andi	r24, 0xF0	; 240
     9d8:	9f 7e       	andi	r25, 0xEF	; 239
     9da:	98 2b       	or	r25, r24
     9dc:	95 b9       	out	0x05, r25	; 5
} 
     9de:	08 95       	ret

000009e0 <jtag_set_trst_srst>:

//! set both srst and trst simultaneously
void jtag_set_trst_srst(uint8_t trst,uint8_t srst)
{
  JTAG_OUT=(JTAG_OUT&(~ ((1<<JTAG_PIN_SRST)|(1<<JTAG_PIN_TRST)) ))| 
     9e0:	95 b1       	in	r25, 0x05	; 5
     9e2:	9e 7e       	andi	r25, 0xEE	; 238
     9e4:	98 2b       	or	r25, r24
     9e6:	62 95       	swap	r22
     9e8:	60 7f       	andi	r22, 0xF0	; 240
     9ea:	96 2b       	or	r25, r22
     9ec:	95 b9       	out	0x05, r25	; 5
           (srst<<JTAG_PIN_SRST)|(trst<<JTAG_PIN_TRST);
}
     9ee:	08 95       	ret

000009f0 <Scheduler_SetTaskMode>:

void Scheduler_SetTaskMode(const TaskPtr_t Task, const bool TaskStatus)
{
     9f0:	9c 01       	movw	r18, r24
     9f2:	e0 e0       	ldi	r30, 0x00	; 0
     9f4:	f1 e0       	ldi	r31, 0x01	; 1
     9f6:	08 c0       	rjmp	.+16     	; 0xa08 <Scheduler_SetTaskMode+0x18>
	TaskEntry_t* CurrTask = &Scheduler_TaskList[0];
					
	while (CurrTask != &Scheduler_TaskList[Scheduler_TotalTasks])
	{
		if (CurrTask->Task == Task)
     9f8:	80 81       	ld	r24, Z
     9fa:	91 81       	ldd	r25, Z+1	; 0x01
     9fc:	82 17       	cp	r24, r18
     9fe:	93 07       	cpc	r25, r19
     a00:	11 f4       	brne	.+4      	; 0xa06 <Scheduler_SetTaskMode+0x16>
		{
			CurrTask->TaskStatus = TaskStatus;
     a02:	62 83       	std	Z+2, r22	; 0x02
     a04:	08 95       	ret
			break;
		}
		
		CurrTask++;
     a06:	34 96       	adiw	r30, 0x04	; 4

void Scheduler_SetTaskMode(const TaskPtr_t Task, const bool TaskStatus)
{
	TaskEntry_t* CurrTask = &Scheduler_TaskList[0];
					
	while (CurrTask != &Scheduler_TaskList[Scheduler_TotalTasks])
     a08:	80 91 7d 02 	lds	r24, 0x027D
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	80 50       	subi	r24, 0x00	; 0
     a18:	9f 4f       	sbci	r25, 0xFF	; 255
     a1a:	e8 17       	cp	r30, r24
     a1c:	f9 07       	cpc	r31, r25
     a1e:	61 f7       	brne	.-40     	; 0x9f8 <Scheduler_SetTaskMode+0x8>
     a20:	08 95       	ret

00000a22 <USB_Device_ProcessControlPacket>:
uint8_t USB_ConfigurationNumber;
bool    USB_RemoteWakeupEnabled;
bool    USB_CurrentlySelfPowered;

void USB_Device_ProcessControlPacket(void)
{
     a22:	df 93       	push	r29
     a24:	cf 93       	push	r28
     a26:	00 d0       	rcall	.+0      	; 0xa28 <USB_Device_ProcessControlPacket+0x6>
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	e5 e8       	ldi	r30, 0x85	; 133
     a2e:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     a30:	80 91 f1 00 	lds	r24, 0x00F1
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
     a34:	81 93       	st	Z+, r24
void USB_Device_ProcessControlPacket(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	ed 38       	cpi	r30, 0x8D	; 141
     a3a:	f8 07       	cpc	r31, r24
     a3c:	c9 f7       	brne	.-14     	; 0xa30 <USB_Device_ProcessControlPacket+0xe>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a3e:	80 91 85 02 	lds	r24, 0x0285
	
	switch (USB_ControlRequest.bRequest)
     a42:	30 91 86 02 	lds	r19, 0x0286
     a46:	35 30       	cpi	r19, 0x05	; 5
     a48:	09 f4       	brne	.+2      	; 0xa4c <USB_Device_ProcessControlPacket+0x2a>
     a4a:	99 c0       	rjmp	.+306    	; 0xb7e <__stack+0x7f>
     a4c:	36 30       	cpi	r19, 0x06	; 6
     a4e:	48 f4       	brcc	.+18     	; 0xa62 <USB_Device_ProcessControlPacket+0x40>
     a50:	31 30       	cpi	r19, 0x01	; 1
     a52:	09 f4       	brne	.+2      	; 0xa56 <USB_Device_ProcessControlPacket+0x34>
     a54:	45 c0       	rjmp	.+138    	; 0xae0 <USB_Device_ProcessControlPacket+0xbe>
     a56:	31 30       	cpi	r19, 0x01	; 1
     a58:	70 f0       	brcs	.+28     	; 0xa76 <USB_Device_ProcessControlPacket+0x54>
     a5a:	33 30       	cpi	r19, 0x03	; 3
     a5c:	09 f0       	breq	.+2      	; 0xa60 <USB_Device_ProcessControlPacket+0x3e>
     a5e:	66 c1       	rjmp	.+716    	; 0xd2c <__stack+0x22d>
     a60:	3f c0       	rjmp	.+126    	; 0xae0 <USB_Device_ProcessControlPacket+0xbe>
     a62:	38 30       	cpi	r19, 0x08	; 8
     a64:	09 f4       	brne	.+2      	; 0xa68 <USB_Device_ProcessControlPacket+0x46>
     a66:	20 c1       	rjmp	.+576    	; 0xca8 <__stack+0x1a9>
     a68:	39 30       	cpi	r19, 0x09	; 9
     a6a:	09 f4       	brne	.+2      	; 0xa6e <USB_Device_ProcessControlPacket+0x4c>
     a6c:	40 c1       	rjmp	.+640    	; 0xcee <__stack+0x1ef>
     a6e:	36 30       	cpi	r19, 0x06	; 6
     a70:	09 f0       	breq	.+2      	; 0xa74 <USB_Device_ProcessControlPacket+0x52>
     a72:	5c c1       	rjmp	.+696    	; 0xd2c <__stack+0x22d>
     a74:	9f c0       	rjmp	.+318    	; 0xbb4 <__stack+0xb5>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a76:	80 38       	cpi	r24, 0x80	; 128
     a78:	21 f0       	breq	.+8      	; 0xa82 <USB_Device_ProcessControlPacket+0x60>
     a7a:	82 38       	cpi	r24, 0x82	; 130
     a7c:	09 f0       	breq	.+2      	; 0xa80 <USB_Device_ProcessControlPacket+0x5e>
     a7e:	56 c1       	rjmp	.+684    	; 0xd2c <__stack+0x22d>
     a80:	08 c0       	rjmp	.+16     	; 0xa92 <USB_Device_ProcessControlPacket+0x70>
     a82:	90 91 80 02 	lds	r25, 0x0280
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			
			if (USB_RemoteWakeupEnabled)
     a86:	80 91 81 02 	lds	r24, 0x0281
     a8a:	88 23       	and	r24, r24
     a8c:	91 f0       	breq	.+36     	; 0xab2 <USB_Device_ProcessControlPacket+0x90>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a8e:	92 60       	ori	r25, 0x02	; 2
     a90:	10 c0       	rjmp	.+32     	; 0xab2 <USB_Device_ProcessControlPacket+0x90>
			
			break;
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex);
     a92:	80 91 89 02 	lds	r24, 0x0289
     a96:	80 93 e9 00 	sts	0x00E9, r24

			CurrentStatus = Endpoint_IsStalled();
     a9a:	80 91 eb 00 	lds	r24, 0x00EB
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	25 e0       	ldi	r18, 0x05	; 5
     aa2:	96 95       	lsr	r25
     aa4:	87 95       	ror	r24
     aa6:	2a 95       	dec	r18
     aa8:	e1 f7       	brne	.-8      	; 0xaa2 <USB_Device_ProcessControlPacket+0x80>
     aaa:	98 2f       	mov	r25, r24
     aac:	91 70       	andi	r25, 0x01	; 1

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);			  
     aae:	10 92 e9 00 	sts	0x00E9, r1

			break;
#endif
	}

	Endpoint_ClearSETUP();
     ab2:	80 91 e8 00 	lds	r24, 0x00E8
     ab6:	87 7f       	andi	r24, 0xF7	; 247
     ab8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param Word  Next word to write to the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
     abc:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
     ac0:	10 92 f1 00 	sts	0x00F1, r1

	Endpoint_Write_Word_LE(CurrentStatus);

	Endpoint_ClearIN();
     ac4:	80 91 e8 00 	lds	r24, 0x00E8
     ac8:	98 2f       	mov	r25, r24
     aca:	9e 7f       	andi	r25, 0xFE	; 254
     acc:	90 93 e8 00 	sts	0x00E8, r25
     ad0:	8f 77       	andi	r24, 0x7F	; 127
     ad2:	80 93 e8 00 	sts	0x00E8, r24
	
	while (!(Endpoint_IsOUTReceived()));
     ad6:	80 91 e8 00 	lds	r24, 0x00E8
     ada:	82 ff       	sbrs	r24, 2
     adc:	fc cf       	rjmp	.-8      	; 0xad6 <USB_Device_ProcessControlPacket+0xb4>
     ade:	fd c0       	rjmp	.+506    	; 0xcda <__stack+0x1db>
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ae0:	88 23       	and	r24, r24
     ae2:	19 f0       	breq	.+6      	; 0xaea <USB_Device_ProcessControlPacket+0xc8>
     ae4:	82 30       	cpi	r24, 0x02	; 2
     ae6:	09 f0       	breq	.+2      	; 0xaea <USB_Device_ProcessControlPacket+0xc8>
     ae8:	21 c1       	rjmp	.+578    	; 0xd2c <__stack+0x22d>
	Endpoint_ClearOUT();
}

static void USB_Device_ClearSetFeature(void)
{	
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	8f 71       	andi	r24, 0x1F	; 31
     aee:	90 70       	andi	r25, 0x00	; 0
     af0:	00 97       	sbiw	r24, 0x00	; 0
     af2:	19 f0       	breq	.+6      	; 0xafa <USB_Device_ProcessControlPacket+0xd8>
     af4:	02 97       	sbiw	r24, 0x02	; 2
     af6:	b9 f5       	brne	.+110    	; 0xb66 <__stack+0x67>
     af8:	0c c0       	rjmp	.+24     	; 0xb12 <__stack+0x13>
	{
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_REMOTE_WAKEUP)
     afa:	80 91 87 02 	lds	r24, 0x0287
     afe:	81 30       	cpi	r24, 0x01	; 1
     b00:	09 f0       	breq	.+2      	; 0xb04 <__stack+0x5>
     b02:	15 c1       	rjmp	.+554    	; 0xd2e <__stack+0x22f>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b04:	10 92 81 02 	sts	0x0281, r1
     b08:	33 30       	cpi	r19, 0x03	; 3
     b0a:	69 f5       	brne	.+90     	; 0xb66 <__stack+0x67>
     b0c:	80 93 81 02 	sts	0x0281, r24
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__stack+0x67>
			  return;
			
			break;			
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
     b12:	80 91 87 02 	lds	r24, 0x0287
     b16:	88 23       	and	r24, r24
     b18:	31 f5       	brne	.+76     	; 0xb66 <__stack+0x67>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b1a:	20 91 89 02 	lds	r18, 0x0289
     b1e:	27 70       	andi	r18, 0x07	; 7
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b20:	09 f4       	brne	.+2      	; 0xb24 <__stack+0x25>
     b22:	05 c1       	rjmp	.+522    	; 0xd2e <__stack+0x22f>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
     b24:	20 93 e9 00 	sts	0x00E9, r18

				if (Endpoint_IsEnabled())
     b28:	80 91 eb 00 	lds	r24, 0x00EB
     b2c:	80 ff       	sbrs	r24, 0
     b2e:	1b c0       	rjmp	.+54     	; 0xb66 <__stack+0x67>
				{				
					if (USB_ControlRequest.bRequest == REQ_ClearFeature)
     b30:	31 30       	cpi	r19, 0x01	; 1
     b32:	a1 f4       	brne	.+40     	; 0xb5c <__stack+0x5d>
					{
						Endpoint_ClearStall();
     b34:	80 91 eb 00 	lds	r24, 0x00EB
     b38:	80 61       	ori	r24, 0x10	; 16
     b3a:	80 93 eb 00 	sts	0x00EB, r24
						Endpoint_ResetFIFO(EndpointIndex);
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <__stack+0x49>
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	2a 95       	dec	r18
     b4a:	e2 f7       	brpl	.-8      	; 0xb44 <__stack+0x45>
     b4c:	80 93 ea 00 	sts	0x00EA, r24
     b50:	10 92 ea 00 	sts	0x00EA, r1
						Endpoint_ResetDataToggle();
     b54:	80 91 eb 00 	lds	r24, 0x00EB
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	03 c0       	rjmp	.+6      	; 0xb62 <__stack+0x63>
					}
					else
					{
						Endpoint_StallTransaction();
     b5c:	80 91 eb 00 	lds	r24, 0x00EB
     b60:	80 62       	ori	r24, 0x20	; 32
     b62:	80 93 eb 00 	sts	0x00EB, r24
			
			break;
#endif
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
     b66:	10 92 e9 00 	sts	0x00E9, r1

	Endpoint_ClearSETUP();
     b6a:	80 91 e8 00 	lds	r24, 0x00E8
     b6e:	87 7f       	andi	r24, 0xF7	; 247
     b70:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearIN();
     b74:	80 91 e8 00 	lds	r24, 0x00E8
     b78:	98 2f       	mov	r25, r24
     b7a:	9e 7f       	andi	r25, 0xFE	; 254
     b7c:	b2 c0       	rjmp	.+356    	; 0xce2 <__stack+0x1e3>
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b7e:	88 23       	and	r24, r24
     b80:	09 f0       	breq	.+2      	; 0xb84 <__stack+0x85>
     b82:	d4 c0       	rjmp	.+424    	; 0xd2c <__stack+0x22d>
	}
}

static void USB_Device_SetAddress(void)
{
	Endpoint_ClearSETUP();
     b84:	80 91 e8 00 	lds	r24, 0x00E8
     b88:	87 7f       	andi	r24, 0xF7	; 247
     b8a:	80 93 e8 00 	sts	0x00E8, r24
	
	Endpoint_ClearIN();
     b8e:	80 91 e8 00 	lds	r24, 0x00E8
     b92:	98 2f       	mov	r25, r24
     b94:	9e 7f       	andi	r25, 0xFE	; 254
     b96:	90 93 e8 00 	sts	0x00E8, r25
     b9a:	8f 77       	andi	r24, 0x7F	; 127
     b9c:	80 93 e8 00 	sts	0x00E8, r24
	
	while (!(Endpoint_IsINReady()));
     ba0:	80 91 e8 00 	lds	r24, 0x00E8
     ba4:	80 ff       	sbrs	r24, 0
     ba6:	fc cf       	rjmp	.-8      	; 0xba0 <__stack+0xa1>

	UDADDR = ((1 << ADDEN) | ((uint8_t)USB_ControlRequest.wValue & 0x7F));
     ba8:	80 91 87 02 	lds	r24, 0x0287
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	80 93 e3 00 	sts	0x00E3, r24
     bb2:	bd c0       	rjmp	.+378    	; 0xd2e <__stack+0x22f>
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bb4:	80 58       	subi	r24, 0x80	; 128
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	08 f0       	brcs	.+2      	; 0xbbc <__stack+0xbd>
     bba:	b8 c0       	rjmp	.+368    	; 0xd2c <__stack+0x22d>
static void USB_Device_GetDescriptor(void)
{
	void*    DescriptorPointer;
	uint16_t DescriptorSize;
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue,
     bbc:	80 91 87 02 	lds	r24, 0x0287
     bc0:	90 91 88 02 	lds	r25, 0x0288
     bc4:	60 91 89 02 	lds	r22, 0x0289
     bc8:	ae 01       	movw	r20, r28
     bca:	4f 5f       	subi	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	7d dc       	rcall	.-1798   	; 0x4ca <CALLBACK_USB_GetDescriptor>
     bd0:	9c 01       	movw	r18, r24
     bd2:	00 97       	sbiw	r24, 0x00	; 0
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <__stack+0xd9>
     bd6:	ab c0       	rjmp	.+342    	; 0xd2e <__stack+0x22f>
	                                                 USB_ControlRequest.wIndex, &DescriptorPointer)) == NO_DESCRIPTOR)
	{
		return;
	}
	
	Endpoint_ClearSETUP();
     bd8:	80 91 e8 00 	lds	r24, 0x00E8
     bdc:	87 7f       	andi	r24, 0xF7	; 247
     bde:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#else
	bool SendZLP;
	
	if (USB_ControlRequest.wLength > DescriptorSize)
     be2:	80 91 8b 02 	lds	r24, 0x028B
     be6:	90 91 8c 02 	lds	r25, 0x028C
     bea:	28 17       	cp	r18, r24
     bec:	39 07       	cpc	r19, r25
     bee:	20 f4       	brcc	.+8      	; 0xbf8 <__stack+0xf9>
	  USB_ControlRequest.wLength = DescriptorSize;
     bf0:	30 93 8c 02 	sts	0x028C, r19
     bf4:	20 93 8b 02 	sts	0x028B, r18
     bf8:	79 81       	ldd	r23, Y+1	; 0x01
     bfa:	6a 81       	ldd	r22, Y+2	; 0x02
     bfc:	20 91 8b 02 	lds	r18, 0x028B
     c00:	30 91 8c 02 	lds	r19, 0x028C
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	35 c0       	rjmp	.+106    	; 0xc72 <__stack+0x173>
	
	while (USB_ControlRequest.wLength)
	{
		while (!(Endpoint_IsINReady()))
		{
			if (Endpoint_IsOUTReceived())
     c08:	80 91 e8 00 	lds	r24, 0x00E8
     c0c:	82 ff       	sbrs	r24, 2
     c0e:	05 c0       	rjmp	.+10     	; 0xc1a <__stack+0x11b>
     c10:	30 93 8c 02 	sts	0x028C, r19
     c14:	20 93 8b 02 	sts	0x028B, r18
     c18:	60 c0       	rjmp	.+192    	; 0xcda <__stack+0x1db>
	if (USB_ControlRequest.wLength > DescriptorSize)
	  USB_ControlRequest.wLength = DescriptorSize;
	
	while (USB_ControlRequest.wLength)
	{
		while (!(Endpoint_IsINReady()))
     c1a:	80 91 e8 00 	lds	r24, 0x00E8
     c1e:	80 ff       	sbrs	r24, 0
     c20:	f3 cf       	rjmp	.-26     	; 0xc08 <__stack+0x109>
     c22:	87 2f       	mov	r24, r23
     c24:	96 2f       	mov	r25, r22
     c26:	fc 01       	movw	r30, r24
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__stack+0x135>
		while (USB_ControlRequest.wLength && (Endpoint_BytesInEndpoint() < USB_ControlEndpointSize))
		{
			#if defined (USE_EEPROM_DESCRIPTORS)
			Endpoint_Write_Byte(eeprom_read_byte(DescriptorPointer++));			
			#else
			Endpoint_Write_Byte(pgm_read_byte(DescriptorPointer++));
     c2a:	84 91       	lpm	r24, Z+
			 *  \param Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     c2c:	80 93 f1 00 	sts	0x00F1, r24
     c30:	31 96       	adiw	r30, 0x01	; 1
     c32:	9a 01       	movw	r18, r20
     c34:	7e 2f       	mov	r23, r30
     c36:	6f 2f       	mov	r22, r31
				Endpoint_ClearOUT();
				return;
			}		
		}
		
		while (USB_ControlRequest.wLength && (Endpoint_BytesInEndpoint() < USB_ControlEndpointSize))
     c38:	21 15       	cp	r18, r1
     c3a:	31 05       	cpc	r19, r1
     c3c:	49 f0       	breq	.+18     	; 0xc50 <__stack+0x151>
     c3e:	80 91 f2 00 	lds	r24, 0x00F2
     c42:	90 91 f3 00 	lds	r25, 0x00F3
     c46:	a9 01       	movw	r20, r18
     c48:	41 50       	subi	r20, 0x01	; 1
     c4a:	50 40       	sbci	r21, 0x00	; 0
     c4c:	08 97       	sbiw	r24, 0x08	; 8
     c4e:	68 f3       	brcs	.-38     	; 0xc2a <__stack+0x12b>
			#endif
			
			USB_ControlRequest.wLength--;
		}
		
		SendZLP = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
     c50:	80 91 f2 00 	lds	r24, 0x00F2
     c54:	90 91 f3 00 	lds	r25, 0x00F3
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	08 97       	sbiw	r24, 0x08	; 8
     c5c:	09 f4       	brne	.+2      	; 0xc60 <__stack+0x161>
     c5e:	41 e0       	ldi	r20, 0x01	; 1
		Endpoint_ClearIN();
     c60:	80 91 e8 00 	lds	r24, 0x00E8
     c64:	98 2f       	mov	r25, r24
     c66:	9e 7f       	andi	r25, 0xFE	; 254
     c68:	90 93 e8 00 	sts	0x00E8, r25
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	80 93 e8 00 	sts	0x00E8, r24
	bool SendZLP;
	
	if (USB_ControlRequest.wLength > DescriptorSize)
	  USB_ControlRequest.wLength = DescriptorSize;
	
	while (USB_ControlRequest.wLength)
     c72:	21 15       	cp	r18, r1
     c74:	31 05       	cpc	r19, r1
     c76:	89 f6       	brne	.-94     	; 0xc1a <__stack+0x11b>
     c78:	10 92 8c 02 	sts	0x028C, r1
     c7c:	10 92 8b 02 	sts	0x028B, r1
		
		SendZLP = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
		Endpoint_ClearIN();
	}
	
	if (SendZLP)
     c80:	44 23       	and	r20, r20
     c82:	69 f0       	breq	.+26     	; 0xc9e <__stack+0x19f>
	{
		while (!(Endpoint_IsINReady()));
     c84:	80 91 e8 00 	lds	r24, 0x00E8
     c88:	80 ff       	sbrs	r24, 0
     c8a:	fc cf       	rjmp	.-8      	; 0xc84 <__stack+0x185>
		Endpoint_ClearIN();
     c8c:	80 91 e8 00 	lds	r24, 0x00E8
     c90:	98 2f       	mov	r25, r24
     c92:	9e 7f       	andi	r25, 0xFE	; 254
     c94:	90 93 e8 00 	sts	0x00E8, r25
     c98:	8f 77       	andi	r24, 0x7F	; 127
     c9a:	80 93 e8 00 	sts	0x00E8, r24
	}

	while (!(Endpoint_IsOUTReceived()));
     c9e:	80 91 e8 00 	lds	r24, 0x00E8
     ca2:	82 ff       	sbrs	r24, 2
     ca4:	fc cf       	rjmp	.-8      	; 0xc9e <__stack+0x19f>
     ca6:	19 c0       	rjmp	.+50     	; 0xcda <__stack+0x1db>
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     ca8:	80 38       	cpi	r24, 0x80	; 128
     caa:	09 f0       	breq	.+2      	; 0xcae <__stack+0x1af>
     cac:	3f c0       	rjmp	.+126    	; 0xd2c <__stack+0x22d>
	EVENT_USB_ConfigurationChanged();
}

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
     cae:	80 91 e8 00 	lds	r24, 0x00E8
     cb2:	87 7f       	andi	r24, 0xF7	; 247
     cb4:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_Byte(USB_ConfigurationNumber);
     cb8:	80 91 82 02 	lds	r24, 0x0282
     cbc:	80 93 f1 00 	sts	0x00F1, r24
	
	Endpoint_ClearIN();
     cc0:	80 91 e8 00 	lds	r24, 0x00E8
     cc4:	98 2f       	mov	r25, r24
     cc6:	9e 7f       	andi	r25, 0xFE	; 254
     cc8:	90 93 e8 00 	sts	0x00E8, r25
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	80 93 e8 00 	sts	0x00E8, r24

	while (!(Endpoint_IsOUTReceived()));
     cd2:	80 91 e8 00 	lds	r24, 0x00E8
     cd6:	82 ff       	sbrs	r24, 2
     cd8:	fc cf       	rjmp	.-8      	; 0xcd2 <__stack+0x1d3>
	Endpoint_ClearOUT();
     cda:	80 91 e8 00 	lds	r24, 0x00E8
     cde:	98 2f       	mov	r25, r24
     ce0:	9b 7f       	andi	r25, 0xFB	; 251
     ce2:	90 93 e8 00 	sts	0x00E8, r25
     ce6:	8f 77       	andi	r24, 0x7F	; 127
     ce8:	80 93 e8 00 	sts	0x00E8, r24
     cec:	20 c0       	rjmp	.+64     	; 0xd2e <__stack+0x22f>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cee:	88 23       	and	r24, r24
     cf0:	e9 f4       	brne	.+58     	; 0xd2c <__stack+0x22d>
	return;
}

static void USB_Device_SetConfiguration(void)
{
	bool AlreadyConfigured = (USB_ConfigurationNumber != 0);
     cf2:	30 91 82 02 	lds	r19, 0x0282

#if defined(USE_SINGLE_DEVICE_CONFIGURATION)
	if ((uint8_t)USB_ControlRequest.wValue > 1)
     cf6:	20 91 87 02 	lds	r18, 0x0287
     cfa:	22 30       	cpi	r18, 0x02	; 2
     cfc:	c0 f4       	brcc	.+48     	; 0xd2e <__stack+0x22f>
#endif
	{
		return;
	}
	
	Endpoint_ClearSETUP();
     cfe:	80 91 e8 00 	lds	r24, 0x00E8
     d02:	87 7f       	andi	r24, 0xF7	; 247
     d04:	80 93 e8 00 	sts	0x00E8, r24

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     d08:	20 93 82 02 	sts	0x0282, r18

	Endpoint_ClearIN();
     d0c:	80 91 e8 00 	lds	r24, 0x00E8
     d10:	98 2f       	mov	r25, r24
     d12:	9e 7f       	andi	r25, 0xFE	; 254
     d14:	90 93 e8 00 	sts	0x00E8, r25
     d18:	8f 77       	andi	r24, 0x7F	; 127
     d1a:	80 93 e8 00 	sts	0x00E8, r24

	if (!(AlreadyConfigured) && USB_ConfigurationNumber)
     d1e:	33 23       	and	r19, r19
     d20:	19 f4       	brne	.+6      	; 0xd28 <__stack+0x229>
     d22:	22 23       	and	r18, r18
     d24:	09 f0       	breq	.+2      	; 0xd28 <__stack+0x229>
	  EVENT_USB_DeviceEnumerationComplete();
     d26:	3e d1       	rcall	.+636    	; 0xfa4 <USB_Event_Stub>

	EVENT_USB_ConfigurationChanged();
     d28:	5d db       	rcall	.-2374   	; 0x3e4 <EVENT_USB_ConfigurationChanged>
     d2a:	01 c0       	rjmp	.+2      	; 0xd2e <__stack+0x22f>

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_UnhandledControlPacket();
     d2c:	28 da       	rcall	.-2992   	; 0x17e <EVENT_USB_UnhandledControlPacket>
	  
	if (Endpoint_IsSETUPReceived())
     d2e:	80 91 e8 00 	lds	r24, 0x00E8
     d32:	83 ff       	sbrs	r24, 3
     d34:	0a c0       	rjmp	.+20     	; 0xd4a <__stack+0x24b>
	{
		Endpoint_StallTransaction();
     d36:	80 91 eb 00 	lds	r24, 0x00EB
     d3a:	80 62       	ori	r24, 0x20	; 32
     d3c:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ClearSETUP();		
     d40:	80 91 e8 00 	lds	r24, 0x00E8
     d44:	87 7f       	andi	r24, 0xF7	; 247
     d46:	80 93 e8 00 	sts	0x00E8, r24
	}
}
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <Endpoint_ConfigureEndpoint_Prv>:

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number, const uint8_t UECFG0XData, const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
     d54:	80 93 e9 00 	sts	0x00E9, r24
	Endpoint_EnableEndpoint();
     d58:	80 91 eb 00 	lds	r24, 0x00EB
     d5c:	81 60       	ori	r24, 0x01	; 1
     d5e:	80 93 eb 00 	sts	0x00EB, r24

	UECFG1X = 0;
     d62:	10 92 ed 00 	sts	0x00ED, r1

	UECFG0X = UECFG0XData;
     d66:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     d6a:	40 93 ed 00 	sts	0x00ED, r20

	return Endpoint_IsConfigured();
     d6e:	80 91 ee 00 	lds	r24, 0x00EE
}
     d72:	88 1f       	adc	r24, r24
     d74:	88 27       	eor	r24, r24
     d76:	88 1f       	adc	r24, r24
     d78:	08 95       	ret

00000d7a <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
     d7a:	10 92 f4 00 	sts	0x00F4, r1
     d7e:	90 e0       	ldi	r25, 0x00	; 0

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
     d80:	90 93 e9 00 	sts	0x00E9, r25
		UEIENX = 0;
     d84:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX = 0;
     d88:	10 92 e8 00 	sts	0x00E8, r1
		Endpoint_DeallocateMemory();
     d8c:	80 91 ed 00 	lds	r24, 0x00ED
     d90:	8d 7f       	andi	r24, 0xFD	; 253
     d92:	80 93 ed 00 	sts	0x00ED, r24
		Endpoint_DisableEndpoint();
     d96:	80 91 eb 00 	lds	r24, 0x00EB
     d9a:	8e 7f       	andi	r24, 0xFE	; 254
     d9c:	80 93 eb 00 	sts	0x00EB, r24

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     da0:	9f 5f       	subi	r25, 0xFF	; 255
     da2:	97 30       	cpi	r25, 0x07	; 7
     da4:	69 f7       	brne	.-38     	; 0xd80 <Endpoint_ClearEndpoints+0x6>
		UEIENX = 0;
		UEINTX = 0;
		Endpoint_DeallocateMemory();
		Endpoint_DisableEndpoint();
	}
}
     da6:	08 95       	ret

00000da8 <Endpoint_WaitUntilReady>:
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;	
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	USB_INT_Clear(USB_INT_SOFI);
     da8:	80 91 e1 00 	lds	r24, 0x00E1
     dac:	8b 7f       	andi	r24, 0xFB	; 251
     dae:	80 93 e1 00 	sts	0x00E1, r24
     db2:	94 e6       	ldi	r25, 0x64	; 100

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     db4:	80 91 ec 00 	lds	r24, 0x00EC
     db8:	80 ff       	sbrs	r24, 0
     dba:	05 c0       	rjmp	.+10     	; 0xdc6 <Endpoint_WaitUntilReady+0x1e>
		{
			if (Endpoint_IsINReady())
     dbc:	80 91 e8 00 	lds	r24, 0x00E8
     dc0:	80 ff       	sbrs	r24, 0
     dc2:	05 c0       	rjmp	.+10     	; 0xdce <Endpoint_WaitUntilReady+0x26>
     dc4:	1f c0       	rjmp	.+62     	; 0xe04 <Endpoint_WaitUntilReady+0x5c>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     dc6:	80 91 e8 00 	lds	r24, 0x00E8
     dca:	82 fd       	sbrc	r24, 2
     dcc:	1b c0       	rjmp	.+54     	; 0xe04 <Endpoint_WaitUntilReady+0x5c>
			  return ENDPOINT_READYWAIT_NoError;		
		}
		
		if (!(USB_IsConnected))
     dce:	80 91 84 02 	lds	r24, 0x0284
     dd2:	88 23       	and	r24, r24
     dd4:	11 f4       	brne	.+4      	; 0xdda <Endpoint_WaitUntilReady+0x32>
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (Endpoint_IsStalled())
     dda:	80 91 eb 00 	lds	r24, 0x00EB
     dde:	85 ff       	sbrs	r24, 5
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <Endpoint_WaitUntilReady+0x3e>
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
			  
		if (USB_INT_HasOccurred(USB_INT_SOFI))
     de6:	80 91 e1 00 	lds	r24, 0x00E1
     dea:	82 ff       	sbrs	r24, 2
     dec:	e3 cf       	rjmp	.-58     	; 0xdb4 <Endpoint_WaitUntilReady+0xc>
		{
			USB_INT_Clear(USB_INT_SOFI);
     dee:	80 91 e1 00 	lds	r24, 0x00E1
     df2:	8b 7f       	andi	r24, 0xFB	; 251
     df4:	80 93 e1 00 	sts	0x00E1, r24

			if (!(TimeoutMSRem--))
     df8:	99 23       	and	r25, r25
     dfa:	11 f4       	brne	.+4      	; 0xe00 <Endpoint_WaitUntilReady+0x58>
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	08 95       	ret
     e00:	91 50       	subi	r25, 0x01	; 1
     e02:	d8 cf       	rjmp	.-80     	; 0xdb4 <Endpoint_WaitUntilReady+0xc>
     e04:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     e06:	08 95       	ret

00000e08 <Endpoint_Write_Stream_LE>:
uint8_t Endpoint_Write_Stream_LE(const void* Buffer, uint16_t Length
#if !defined(NO_STREAM_CALLBACKS)
                                 , StreamCallbackPtr_t Callback
#endif
								 )
{
     e08:	ff 92       	push	r15
     e0a:	0f 93       	push	r16
     e0c:	1f 93       	push	r17
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	18 2f       	mov	r17, r24
     e14:	09 2f       	mov	r16, r25
     e16:	eb 01       	movw	r28, r22
	uint8_t* DataStream   = (uint8_t*)Buffer;
	uint8_t  ErrorCode;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
     e18:	c7 df       	rcall	.-114    	; 0xda8 <Endpoint_WaitUntilReady>
     e1a:	f8 2e       	mov	r15, r24
     e1c:	88 23       	and	r24, r24
     e1e:	f1 f4       	brne	.+60     	; 0xe5c <Endpoint_Write_Stream_LE+0x54>
#if !defined(NO_STREAM_CALLBACKS)
                                 , StreamCallbackPtr_t Callback
#endif
								 )
{
	uint8_t* DataStream   = (uint8_t*)Buffer;
     e20:	81 2f       	mov	r24, r17
     e22:	90 2f       	mov	r25, r16
     e24:	9c 01       	movw	r18, r24
     e26:	89 01       	movw	r16, r18
     e28:	17 c0       	rjmp	.+46     	; 0xe58 <Endpoint_Write_Stream_LE+0x50>
	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     e2a:	80 91 e8 00 	lds	r24, 0x00E8
     e2e:	85 fd       	sbrc	r24, 5
     e30:	0d c0       	rjmp	.+26     	; 0xe4c <Endpoint_Write_Stream_LE+0x44>
		{
			Endpoint_ClearIN();
     e32:	80 91 e8 00 	lds	r24, 0x00E8
     e36:	98 2f       	mov	r25, r24
     e38:	9e 7f       	andi	r25, 0xFE	; 254
     e3a:	90 93 e8 00 	sts	0x00E8, r25
     e3e:	8f 77       	andi	r24, 0x7F	; 127
     e40:	80 93 e8 00 	sts	0x00E8, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     e44:	b1 df       	rcall	.-158    	; 0xda8 <Endpoint_WaitUntilReady>
     e46:	88 23       	and	r24, r24
     e48:	39 f0       	breq	.+14     	; 0xe58 <Endpoint_Write_Stream_LE+0x50>
     e4a:	09 c0       	rjmp	.+18     	; 0xe5e <Endpoint_Write_Stream_LE+0x56>
			  return ErrorCode;
		}
		else
		{
			Endpoint_Write_Byte(*(DataStream++));
     e4c:	f8 01       	movw	r30, r16
     e4e:	81 91       	ld	r24, Z+
     e50:	8f 01       	movw	r16, r30
			 *  \param Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     e52:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
     e56:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  ErrorCode;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	while (Length)
     e58:	20 97       	sbiw	r28, 0x00	; 0
     e5a:	39 f7       	brne	.-50     	; 0xe2a <Endpoint_Write_Stream_LE+0x22>
     e5c:	8f 2d       	mov	r24, r15
			Length--;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	08 95       	ret

00000e6a <Endpoint_Read_Stream_LE>:
uint8_t Endpoint_Read_Stream_LE(void* Buffer, uint16_t Length
#if !defined(NO_STREAM_CALLBACKS)
                                 , StreamCallbackPtr_t Callback
#endif
								 )
{
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	18 2f       	mov	r17, r24
     e76:	09 2f       	mov	r16, r25
     e78:	eb 01       	movw	r28, r22
	uint8_t* DataStream = (uint8_t*)Buffer;
	uint8_t  ErrorCode;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
     e7a:	96 df       	rcall	.-212    	; 0xda8 <Endpoint_WaitUntilReady>
     e7c:	f8 2e       	mov	r15, r24
     e7e:	88 23       	and	r24, r24
     e80:	f1 f4       	brne	.+60     	; 0xebe <Endpoint_Read_Stream_LE+0x54>
#if !defined(NO_STREAM_CALLBACKS)
                                 , StreamCallbackPtr_t Callback
#endif
								 )
{
	uint8_t* DataStream = (uint8_t*)Buffer;
     e82:	81 2f       	mov	r24, r17
     e84:	90 2f       	mov	r25, r16
     e86:	9c 01       	movw	r18, r24
     e88:	89 01       	movw	r16, r18
     e8a:	17 c0       	rjmp	.+46     	; 0xeba <Endpoint_Read_Stream_LE+0x50>
	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     e8c:	80 91 e8 00 	lds	r24, 0x00E8
     e90:	85 fd       	sbrc	r24, 5
     e92:	0d c0       	rjmp	.+26     	; 0xeae <Endpoint_Read_Stream_LE+0x44>
		{
			Endpoint_ClearOUT();
     e94:	80 91 e8 00 	lds	r24, 0x00E8
     e98:	98 2f       	mov	r25, r24
     e9a:	9b 7f       	andi	r25, 0xFB	; 251
     e9c:	90 93 e8 00 	sts	0x00E8, r25
     ea0:	8f 77       	andi	r24, 0x7F	; 127
     ea2:	80 93 e8 00 	sts	0x00E8, r24
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     ea6:	80 df       	rcall	.-256    	; 0xda8 <Endpoint_WaitUntilReady>
     ea8:	88 23       	and	r24, r24
     eaa:	39 f0       	breq	.+14     	; 0xeba <Endpoint_Read_Stream_LE+0x50>
     eac:	09 c0       	rjmp	.+18     	; 0xec0 <Endpoint_Read_Stream_LE+0x56>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     eae:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			*(DataStream++) = Endpoint_Read_Byte();
     eb2:	f8 01       	movw	r30, r16
     eb4:	81 93       	st	Z+, r24
     eb6:	8f 01       	movw	r16, r30
			Length--;
     eb8:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  ErrorCode;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	while (Length)
     eba:	20 97       	sbiw	r28, 0x00	; 0
     ebc:	39 f7       	brne	.-50     	; 0xe8c <Endpoint_Read_Stream_LE+0x22>
     ebe:	8f 2d       	mov	r24, r15
			Length--;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	08 95       	ret

00000ecc <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
     ecc:	6c d0       	rcall	.+216    	; 0xfa6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ece:	73 d0       	rcall	.+230    	; 0xfb6 <USB_INT_ClearAllInterrupts>

	USB_IsConnected = false;
     ed0:	10 92 84 02 	sts	0x0284, r1
	#if defined(USB_CAN_BE_HOST)
	USB_HostState = HOST_STATE_Unattached;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	USB_ConfigurationNumber  = 0;
     ed4:	10 92 82 02 	sts	0x0282, r1
	USB_IsSuspended          = false;
     ed8:	10 92 8d 02 	sts	0x028D, r1
	USB_RemoteWakeupEnabled  = false;
     edc:	10 92 81 02 	sts	0x0281, r1
	USB_CurrentlySelfPowered = false;
     ee0:	10 92 80 02 	sts	0x0280, r1
	#endif
	
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_MODIFIED_FULL_CONTROLLER)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
     ee4:	8a e4       	ldi	r24, 0x4A	; 74
     ee6:	82 bf       	out	0x32, r24	; 50
		#endif

		USB_PLL_On();
     ee8:	19 bc       	out	0x29, r1	; 41
     eea:	89 b5       	in	r24, 0x29	; 41
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	89 bd       	out	0x29, r24	; 41
		while (!(USB_PLL_IsReady()));
     ef0:	09 b4       	in	r0, 0x29	; 41
     ef2:	00 fe       	sbrs	r0, 0
     ef4:	fd cf       	rjmp	.-6      	; 0xef0 <USB_ResetInterface+0x24>
	}
	
	USB_Interface_Reset();
     ef6:	80 91 d8 00 	lds	r24, 0x00D8
     efa:	98 2f       	mov	r25, r24
     efc:	9f 77       	andi	r25, 0x7F	; 127
     efe:	90 93 d8 00 	sts	0x00D8, r25
     f02:	80 68       	ori	r24, 0x80	; 128
     f04:	80 93 d8 00 	sts	0x00D8, r24
		USB_CurrentMode = USB_GetUSBModeFromUID();
	}
	#endif
		
	if (!(USB_Options & USB_OPT_REG_DISABLED))
	  USB_REG_On();
     f08:	80 91 d7 00 	lds	r24, 0x00D7
     f0c:	81 60       	ori	r24, 0x01	; 1
     f0e:	80 93 d7 00 	sts	0x00D7, r24
	
	USB_CLK_Unfreeze();
     f12:	80 91 d8 00 	lds	r24, 0x00D8
     f16:	8f 7d       	andi	r24, 0xDF	; 223
     f18:	80 93 d8 00 	sts	0x00D8, r24
	if (USB_CurrentMode == USB_MODE_DEVICE)
	{
		if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
		  USB_Device_SetLowSpeed();
		else
		  USB_Device_SetHighSpeed();
     f1c:	80 91 e0 00 	lds	r24, 0x00E0
     f20:	8b 7f       	andi	r24, 0xFB	; 251
     f22:	80 93 e0 00 	sts	0x00E0, r24
		  
		USB_INT_Enable(USB_INT_VBUS);
     f26:	80 91 d8 00 	lds	r24, 0x00D8
     f2a:	81 60       	ori	r24, 0x01	; 1
     f2c:	80 93 d8 00 	sts	0x00D8, r24
			#endif
		}
	}
	#endif

	USB_Attach();
     f30:	80 91 e0 00 	lds	r24, 0x00E0
     f34:	8e 7f       	andi	r24, 0xFE	; 254
     f36:	80 93 e0 00 	sts	0x00E0, r24
	
	#if defined(USB_DEVICE_ONLY)	
	USB_INT_Enable(USB_INT_SUSPEND);
     f3a:	80 91 e2 00 	lds	r24, 0x00E2
     f3e:	81 60       	ori	r24, 0x01	; 1
     f40:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
     f44:	80 91 e2 00 	lds	r24, 0x00E2
     f48:	88 60       	ori	r24, 0x08	; 8
     f4a:	80 93 e2 00 	sts	0x00E2, r24
		
		USB_INT_Enable(USB_INT_SRPI);
		USB_INT_Enable(USB_INT_BCERRI);
	}
	#endif
}
     f4e:	08 95       	ret

00000f50 <USB_ShutDown>:
	sei();
}

void USB_ShutDown(void)
{
	if (USB_IsConnected)
     f50:	80 91 84 02 	lds	r24, 0x0284
     f54:	88 23       	and	r24, r24
     f56:	09 f0       	breq	.+2      	; 0xf5a <USB_ShutDown+0xa>
	  EVENT_USB_Disconnect();
     f58:	54 da       	rcall	.-2904   	; 0x402 <EVENT_USB_Disconnect>

	USB_Detach();
     f5a:	80 91 e0 00 	lds	r24, 0x00E0
     f5e:	81 60       	ori	r24, 0x01	; 1
     f60:	80 93 e0 00 	sts	0x00E0, r24

	USB_INT_DisableAllInterrupts();
     f64:	20 d0       	rcall	.+64     	; 0xfa6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f66:	27 d0       	rcall	.+78     	; 0xfb6 <USB_INT_ClearAllInterrupts>

	USB_IsConnected   = false;
     f68:	10 92 84 02 	sts	0x0284, r1
	USB_IsInitialized = false;
     f6c:	10 92 83 02 	sts	0x0283, r1
	#if defined(USB_CAN_BE_HOST)
	USB_HostState = HOST_STATE_Unattached;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	USB_ConfigurationNumber = 0;
     f70:	10 92 82 02 	sts	0x0282, r1

	#if defined(CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_NONE;
	#endif

	USB_Interface_Disable();
     f74:	80 91 d8 00 	lds	r24, 0x00D8
     f78:	8f 77       	andi	r24, 0x7F	; 127
     f7a:	80 93 d8 00 	sts	0x00D8, r24
	USB_PLL_Off();
     f7e:	19 bc       	out	0x29, r1	; 41
	
	#if defined(USB_FULL_CONTROLLER) || defined(USB_MODIFIED_FULL_CONTROLLER)
	USB_OTGPAD_Off();
     f80:	80 91 d8 00 	lds	r24, 0x00D8
     f84:	8f 7e       	andi	r24, 0xEF	; 239
     f86:	80 93 d8 00 	sts	0x00D8, r24
	#endif

	#if defined(USB_CAN_BE_BOTH)
	UHWCON &= ~(1 << UIDE);
	#endif
}
     f8a:	08 95       	ret

00000f8c <USB_Init>:
               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
	USB_ShutDown();
     f8c:	e1 df       	rcall	.-62     	; 0xf50 <USB_ShutDown>
		EVENT_USB_InitFailure(USB_INITERROR_NoUSBModeSpecified);
		return;
	}
	#endif
	
	USB_ResetInterface();
     f8e:	9e df       	rcall	.-196    	; 0xecc <USB_ResetInterface>

	#if defined(USB_FULL_CONTROLLER) || defined(USB_MODIFIED_FULL_CONTROLLER)
	USB_OTGPAD_On();
     f90:	e8 ed       	ldi	r30, 0xD8	; 216
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	80 61       	ori	r24, 0x10	; 16
     f98:	80 83       	st	Z, r24
	#endif

	USB_IsInitialized = true;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	80 93 83 02 	sts	0x0283, r24

	sei();
     fa0:	78 94       	sei
}
     fa2:	08 95       	ret

00000fa4 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     fa4:	08 95       	ret

00000fa6 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_FULL_CONTROLLER)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));				
	#elif defined(USB_MODIFIED_FULL_CONTROLLER)
	USBCON &= ~(1 << VBUSTE);					
     fa6:	e8 ed       	ldi	r30, 0xD8	; 216
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8e 7f       	andi	r24, 0xFE	; 254
     fae:	80 83       	st	Z, r24
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     fb0:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     fb4:	08 95       	ret

00000fb6 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_FULL_CONTROLLER) || defined(USB_MODIFIED_FULL_CONTROLLER)
	USBINT  = 0;
     fb6:	10 92 da 00 	sts	0x00DA, r1
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
     fba:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     fbe:	08 95       	ret

00000fc0 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     fc0:	1f 92       	push	r1
     fc2:	0f 92       	push	r0
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	0f 92       	push	r0
     fc8:	11 24       	eor	r1, r1
     fca:	2f 93       	push	r18
     fcc:	3f 93       	push	r19
     fce:	4f 93       	push	r20
     fd0:	5f 93       	push	r21
     fd2:	6f 93       	push	r22
     fd4:	7f 93       	push	r23
     fd6:	8f 93       	push	r24
     fd8:	9f 93       	push	r25
     fda:	af 93       	push	r26
     fdc:	bf 93       	push	r27
     fde:	ef 93       	push	r30
     fe0:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_FULL_CONTROLLER) || defined(USB_MODIFIED_FULL_CONTROLLER)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
     fe2:	80 91 da 00 	lds	r24, 0x00DA
     fe6:	80 ff       	sbrs	r24, 0
     fe8:	33 c0       	rjmp	.+102    	; 0x1050 <__vector_10+0x90>
     fea:	80 91 d8 00 	lds	r24, 0x00D8
     fee:	80 ff       	sbrs	r24, 0
     ff0:	2f c0       	rjmp	.+94     	; 0x1050 <__vector_10+0x90>
	{
		USB_INT_Clear(USB_INT_VBUS);
     ff2:	80 91 da 00 	lds	r24, 0x00DA
     ff6:	8e 7f       	andi	r24, 0xFE	; 254
     ff8:	80 93 da 00 	sts	0x00DA, r24

		EVENT_USB_VBUSChange();
     ffc:	d3 df       	rcall	.-90     	; 0xfa4 <USB_Event_Stub>

		if (USB_VBUS_GetStatus())
     ffe:	80 91 d9 00 	lds	r24, 0x00D9
    1002:	80 ff       	sbrs	r24, 0
    1004:	0c c0       	rjmp	.+24     	; 0x101e <__vector_10+0x5e>
		{
			EVENT_USB_VBUSConnect();
    1006:	ce df       	rcall	.-100    	; 0xfa4 <USB_Event_Stub>
			
			if (USB_IsConnected)
    1008:	80 91 84 02 	lds	r24, 0x0284
    100c:	88 23       	and	r24, r24
    100e:	09 f0       	breq	.+2      	; 0x1012 <__vector_10+0x52>
			  EVENT_USB_Disconnect();
    1010:	f8 d9       	rcall	.-3088   	; 0x402 <EVENT_USB_Disconnect>
				
			USB_ResetInterface();
    1012:	5c df       	rcall	.-328    	; 0xecc <USB_ResetInterface>
				
			USB_IsConnected = true;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	80 93 84 02 	sts	0x0284, r24

			EVENT_USB_Connect();
    101a:	fb d9       	rcall	.-3082   	; 0x412 <EVENT_USB_Connect>
    101c:	19 c0       	rjmp	.+50     	; 0x1050 <__vector_10+0x90>
		}
		else
		{
			USB_IsConnected = false;
    101e:	10 92 84 02 	sts	0x0284, r1

			EVENT_USB_Disconnect();
    1022:	ef d9       	rcall	.-3106   	; 0x402 <EVENT_USB_Disconnect>
		
			USB_Detach();
    1024:	80 91 e0 00 	lds	r24, 0x00E0
    1028:	81 60       	ori	r24, 0x01	; 1
    102a:	80 93 e0 00 	sts	0x00E0, r24
			USB_CLK_Freeze();
    102e:	80 91 d8 00 	lds	r24, 0x00D8
    1032:	80 62       	ori	r24, 0x20	; 32
    1034:	80 93 d8 00 	sts	0x00D8, r24
			USB_PLL_Off();
    1038:	19 bc       	out	0x29, r1	; 41
			USB_REG_Off();
    103a:	80 91 d7 00 	lds	r24, 0x00D7
    103e:	8e 7f       	andi	r24, 0xFE	; 254
    1040:	80 93 d7 00 	sts	0x00D7, r24

			EVENT_USB_VBUSDisconnect();
    1044:	af df       	rcall	.-162    	; 0xfa4 <USB_Event_Stub>
			
			USB_INT_Clear(USB_INT_VBUS);
    1046:	80 91 da 00 	lds	r24, 0x00DA
    104a:	8e 7f       	andi	r24, 0xFE	; 254
    104c:	80 93 da 00 	sts	0x00DA, r24
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
    1050:	80 91 e1 00 	lds	r24, 0x00E1
    1054:	80 ff       	sbrs	r24, 0
    1056:	1d c0       	rjmp	.+58     	; 0x1092 <__vector_10+0xd2>
    1058:	80 91 e2 00 	lds	r24, 0x00E2
    105c:	80 ff       	sbrs	r24, 0
    105e:	19 c0       	rjmp	.+50     	; 0x1092 <__vector_10+0xd2>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
    1060:	80 91 e1 00 	lds	r24, 0x00E1
    1064:	8e 7f       	andi	r24, 0xFE	; 254
    1066:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
    106a:	80 91 e2 00 	lds	r24, 0x00E2
    106e:	8e 7f       	andi	r24, 0xFE	; 254
    1070:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
    1074:	80 91 e2 00 	lds	r24, 0x00E2
    1078:	80 61       	ori	r24, 0x10	; 16
    107a:	80 93 e2 00 	sts	0x00E2, r24
		
		USB_CLK_Freeze();
    107e:	80 91 d8 00 	lds	r24, 0x00D8
    1082:	80 62       	ori	r24, 0x20	; 32
    1084:	80 93 d8 00 	sts	0x00D8, r24
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();
    1088:	19 bc       	out	0x29, r1	; 41

		USB_IsSuspended = true;
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	80 93 8d 02 	sts	0x028D, r24

		EVENT_USB_Suspend();
    1090:	89 df       	rcall	.-238    	; 0xfa4 <USB_Event_Stub>
			EVENT_USB_Disconnect();
		}
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
    1092:	80 91 e1 00 	lds	r24, 0x00E1
    1096:	84 ff       	sbrs	r24, 4
    1098:	22 c0       	rjmp	.+68     	; 0x10de <__vector_10+0x11e>
    109a:	80 91 e2 00 	lds	r24, 0x00E2
    109e:	84 ff       	sbrs	r24, 4
    10a0:	1e c0       	rjmp	.+60     	; 0x10de <__vector_10+0x11e>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
    10a2:	19 bc       	out	0x29, r1	; 41
    10a4:	89 b5       	in	r24, 0x29	; 41
    10a6:	82 60       	ori	r24, 0x02	; 2
    10a8:	89 bd       	out	0x29, r24	; 41
			while (!(USB_PLL_IsReady()));
    10aa:	09 b4       	in	r0, 0x29	; 41
    10ac:	00 fe       	sbrs	r0, 0
    10ae:	fd cf       	rjmp	.-6      	; 0x10aa <__vector_10+0xea>
		}

		USB_CLK_Unfreeze();
    10b0:	80 91 d8 00 	lds	r24, 0x00D8
    10b4:	8f 7d       	andi	r24, 0xDF	; 223
    10b6:	80 93 d8 00 	sts	0x00D8, r24

		USB_INT_Clear(USB_INT_WAKEUP);
    10ba:	80 91 e1 00 	lds	r24, 0x00E1
    10be:	8f 7e       	andi	r24, 0xEF	; 239
    10c0:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUP);
    10c4:	80 91 e2 00 	lds	r24, 0x00E2
    10c8:	8f 7e       	andi	r24, 0xEF	; 239
    10ca:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPEND);
    10ce:	80 91 e2 00 	lds	r24, 0x00E2
    10d2:	81 60       	ori	r24, 0x01	; 1
    10d4:	80 93 e2 00 	sts	0x00E2, r24
			USB_IsConnected = true;
			EVENT_USB_Connect();
		}
		#endif

		USB_IsSuspended = false;
    10d8:	10 92 8d 02 	sts	0x028D, r1

		EVENT_USB_WakeUp();
    10dc:	63 df       	rcall	.-314    	; 0xfa4 <USB_Event_Stub>
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    10de:	80 91 e1 00 	lds	r24, 0x00E1
    10e2:	83 ff       	sbrs	r24, 3
    10e4:	20 c0       	rjmp	.+64     	; 0x1126 <__vector_10+0x166>
    10e6:	80 91 e2 00 	lds	r24, 0x00E2
    10ea:	83 ff       	sbrs	r24, 3
    10ec:	1c c0       	rjmp	.+56     	; 0x1126 <__vector_10+0x166>
	{
		USB_INT_Clear(USB_INT_EORSTI);
    10ee:	80 91 e1 00 	lds	r24, 0x00E1
    10f2:	87 7f       	andi	r24, 0xF7	; 247
    10f4:	80 93 e1 00 	sts	0x00E1, r24

		USB_ConfigurationNumber = 0;
    10f8:	10 92 82 02 	sts	0x0282, r1

		USB_INT_Clear(USB_INT_SUSPEND);
    10fc:	80 91 e1 00 	lds	r24, 0x00E1
    1100:	8e 7f       	andi	r24, 0xFE	; 254
    1102:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPEND);
    1106:	80 91 e2 00 	lds	r24, 0x00E2
    110a:	8e 7f       	andi	r24, 0xFE	; 254
    110c:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
    1110:	80 91 e2 00 	lds	r24, 0x00E2
    1114:	80 61       	ori	r24, 0x10	; 16
    1116:	80 93 e2 00 	sts	0x00E2, r24

		Endpoint_ClearEndpoints();
    111a:	2f de       	rcall	.-930    	; 0xd7a <Endpoint_ClearEndpoints>

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	42 e0       	ldi	r20, 0x02	; 2
    1122:	18 de       	rcall	.-976    	; 0xd54 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_ENDPOINT_SETUP);
		#endif

		EVENT_USB_Reset();
    1124:	3f df       	rcall	.-386    	; 0xfa4 <USB_Event_Stub>
		EVENT_USB_UIDChange();
		
		USB_ResetInterface();
	}
	#endif
}
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	bf 91       	pop	r27
    112c:	af 91       	pop	r26
    112e:	9f 91       	pop	r25
    1130:	8f 91       	pop	r24
    1132:	7f 91       	pop	r23
    1134:	6f 91       	pop	r22
    1136:	5f 91       	pop	r21
    1138:	4f 91       	pop	r20
    113a:	3f 91       	pop	r19
    113c:	2f 91       	pop	r18
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <USB_USBTask>:
#if defined(USB_CAN_BE_HOST)
volatile uint8_t   USB_HostState;
#endif

TASK(USB_USBTask)
{
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_IsConnected)
    114c:	80 91 84 02 	lds	r24, 0x0284
    1150:	88 23       	and	r24, r24
    1152:	79 f0       	breq	.+30     	; 0x1172 <USB_USBTask+0x2a>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
    1154:	00 91 e9 00 	lds	r16, 0x00E9
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1158:	10 92 e9 00 	sts	0x00E9, r1

		if (Endpoint_IsSETUPReceived())
    115c:	80 91 e8 00 	lds	r24, 0x00E8
    1160:	83 ff       	sbrs	r24, 3
    1162:	04 c0       	rjmp	.+8      	; 0x116c <USB_USBTask+0x24>
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1164:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1166:	f8 94       	cli
			{
				USB_Device_ProcessControlPacket();
    1168:	5c dc       	rcall	.-1864   	; 0xa22 <USB_Device_ProcessControlPacket>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    116a:	1f bf       	out	0x3f, r17	; 63
#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_IsConnected)
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
    116c:	07 70       	andi	r16, 0x07	; 7
			{
				USB_Device_ProcessControlPacket();
			}
		}
		
		Endpoint_SelectEndpoint(PrevEndpoint);
    116e:	00 93 e9 00 	sts	0x00E9, r16
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	08 95       	ret

00001178 <_exit>:
    1178:	f8 94       	cli

0000117a <__stop_program>:
    117a:	ff cf       	rjmp	.-2      	; 0x117a <__stop_program>
